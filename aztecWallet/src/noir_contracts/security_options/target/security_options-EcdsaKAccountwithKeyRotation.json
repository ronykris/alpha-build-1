{"transpiled":true,"noir_version":"0.33.0+eab944cbb77eb613e61a879312b58c415f8a0c13","name":"EcdsaKAccountwithKeyRotation","functions":[{"name":"verify_private_authwit","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(noinitcheck)","aztec(view)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_note_internal","decompose_hint","get_key_validation_request","notify_nullified_note","notify_created_note","get_auth_witness","pack_returns","directive_invert","directive_integer_quotient"]},{"name":"constructor","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(initializer)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"signing_pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signing_pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_contract_instance_internal","get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","key_registry_get_stored_keys_hint","get_public_keys_and_partial_address","notify_created_note","get_key_validation_request","unsafe_rand","emit_encrypted_note_log","directive_invert","directive_integer_quotient"]},{"name":"entrypoint","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"app_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"authwit::entrypoint::app::AppPayload"},"visibility":"private"},{"name":"fee_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::fee::FeePayload"},"visibility":"private"},{"name":"cancellable","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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Lf/jxfRBgpi/u+fP3fPJ7vlV93yje/7NPR/lnp9xz1e4+/fufra7v+vud7r7f+5+mLs/5O6XuPsH7nraXV+66y13/eHW42596tZrbv3i5nM3v/md5s5/7nzg6sONF7f/3GfBF3ZaEacVdVoxpxV3WgmnlXRaKafd5faJ04zTotxxc1pZp5VzWnmnVXBaRadVclplp93ttHucVsVpVZ12b8w4VXNadafVcFpNp9VyWm2n1XHafVY/jYr/Z9/Vc1p9pzVwWkOnNXLa/U57wGmNndbEaQ867SGnNXVaM6c97LRHnNbcaS2c9qjTHnNaS6e1ctrjTnvCaa2d1sZpbZ3WzmnRTmvvtA5Oe9JpHZ3WyWmdndbFaV2d1s1p3Z3Ww2k9ndbLab2d1sdpfZ3Wz2n9nfaU0wY4baDTBjntaacNdtoQpw112jNOG+a04U4b4bRnnTbS9d1po532nNPGOG2s08Y57XmnjXfaBKdNdNoLTpvktMlOe9FpLzltitOmOu1lp73itGlOm+60V532mtNmOG2m01532iynzXbaHKfNddo8p8132gKnveG0N5220GmLnPaW09522mKnLXHaUqe947RlTlvutHed9p7TVjhtpdPed9oHTlvltNVO+9BpHzltjdPWOm2d0z522nqnbXDaJ0771GkbnbbJaZ857XOnbXbaFqdtddoXTtvmtO1O+9JpXzlth9N2Ou1rp33jtF1O2+20PU771ml7nbbPafud9p3TDjjtoNMOOe17px122hGnHXXaMacdd9oJp5102g9OO+W0004747QfnXbWaeecdt5pPzntgtMuOu2S03522mWnXXHaVaf94rRrTrvutF+d9pvTfnfaDafddJo7GcRzWnynJXBaQqclclpipyVxWlKnJXNacqelcFpKp6VyWmqnpXFaWqelc1p6p2VwWkanZXJaZqdlcVpWp2VzWnan5XBaTqflclpup+Vxmt9peZ2Wz2n5nVbAaQWdVshphZ1WxGlFnVbMacWdVsJpJZ1Wyml3Oc2d5IzTopxWxmllnVbOaeWdVsFpFZ1WyWmVnXa30+5xWhWnVXXavU4LOK2a06o7rYbTajqtltNqO62O0+5zWl2n1XNafac1cFpDpzVy2v1Oe8BpjZ3WxGkPOu0hpzV1WjOnPey0R5zW3GktnPao0x5zWkuntXLa4057wmmtndbGaW2d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","debug_symbols":"","brillig_names":["get_note_internal","decompose_hint","get_key_validation_request","notify_nullified_note","notify_created_note","get_auth_witness","enqueue_public_function_call_internal","call_private_function_internal","debug_log_format","notify_set_min_revertible_side_effect_counter","directive_invert","directive_integer_quotient"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":5,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"rotate_key","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"new_signing_pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"new_signing_pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","key_registry_get_stored_keys_hint","get_public_keys_and_partial_address","get_note_internal","get_key_validation_request","notify_nullified_note","notify_created_note","get_auth_witness","unsafe_rand","emit_encrypted_note_log","directive_integer_quotient","directive_invert"]}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000906cb9c3"},{"kind":"string","value":"EcdsaPublicKeyNote"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"public_key","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"new_signing_pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"new_signing_pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"EcdsaKAccountwithKeyRotation::rotate_key_parameters"}}],"kind":"struct","path":"EcdsaKAccountwithKeyRotation::rotate_key_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"inner_hash","type":{"kind":"field"}}],"kind":"struct","path":"EcdsaKAccountwithKeyRotation::verify_private_authwit_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"EcdsaKAccountwithKeyRotation::verify_private_authwit_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"app_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"authwit::entrypoint::app::AppPayload"}},{"name":"fee_payload","type":{"fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall"}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::entrypoint::fee::FeePayload"}},{"name":"cancellable","type":{"kind":"boolean"}}],"kind":"struct","path":"EcdsaKAccountwithKeyRotation::entrypoint_parameters"}}],"kind":"struct","path":"EcdsaKAccountwithKeyRotation::entrypoint_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"signing_pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"signing_pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"EcdsaKAccountwithKeyRotation::constructor_parameters"}}],"kind":"struct","path":"EcdsaKAccountwithKeyRotation::constructor_abi"}]}},"file_map":{"102":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/incoming_body.nr","source":"use crate::note::note_interface::NoteInterface;\nuse crate::event::event_interface::EventInterface;\nuse dep::protocol_types::{scalar::Scalar, point::Point};\n\nuse std::aes128::aes128_encrypt;\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::IvpkM};\n\nstruct EncryptedLogIncomingBody<let M: u32> {\n    plaintext: [u8; M]\n}\n\nimpl<let M: u32> EncryptedLogIncomingBody<M> {\n    pub fn from_note<T, let N: u32>(note: T, storage_slot: Field) -> Self where T: NoteInterface<N, M> {\n        let mut plaintext = note.to_be_bytes(storage_slot);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn from_event<T, let MR: u32>(\n        event: T,\n        randomness: Field\n    ) -> Self where T: EventInterface<M, MR> {\n        let mut plaintext = event.private_to_be_bytes(randomness);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn compute_ciphertext(self, eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n        let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(self.plaintext, iv, sym_key)\n    }\n}\n\nmod test {\n    use dep::protocol_types::{\n        address::AztecAddress, scalar::Scalar, point::Point, traits::Serialize,\n        abis::event_selector::EventSelector\n    };\n\n    use crate::{\n        note::{note_header::NoteHeader, note_interface::NoteInterface},\n        encrypted_logs::incoming_body::EncryptedLogIncomingBody, event::event_interface::EventInterface,\n        context::PrivateContext, keys::public_keys::IvpkM\n    };\n\n    struct AddressNote {\n        address: AztecAddress,\n        owner: AztecAddress,\n        randomness: Field,\n        header: NoteHeader,\n    }\n\n    global ADDRESS_NOTE_LEN: Field = 3;\n    global ADDRESS_NOTE_BYTES_LEN = 32 * 3 + 64;\n\n    impl NoteInterface<ADDRESS_NOTE_LEN, ADDRESS_NOTE_BYTES_LEN> for AddressNote {\n        fn compute_note_hiding_point(_self: Self) -> Point {\n            crate::generators::Ga1\n        }\n\n        fn get_note_type_id() -> Field {\n            1\n        }\n\n        fn get_header(self) -> NoteHeader { self.header}\n\n        fn set_header(&mut self, header: NoteHeader) {self.header = header; }\n\n        fn compute_nullifier(_self: Self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n            1\n        }\n\n        fn compute_nullifier_without_context(_self: Self) -> Field {\n            1\n        }\n\n        fn serialize_content(self) -> [Field; ADDRESS_NOTE_LEN] { [self.address.to_field(), self.owner.to_field(), self.randomness]}\n\n        fn deserialize_content(fields: [Field; ADDRESS_NOTE_LEN]) -> Self {\n            AddressNote { address: AztecAddress::from_field(fields[0]), owner: AztecAddress::from_field(fields[1]), randomness: fields[2], header: NoteHeader::empty() }\n        }\n\n        fn to_be_bytes(self, storage_slot: Field) -> [u8; ADDRESS_NOTE_BYTES_LEN] {\n            let serialized_note = self.serialize_content();\n\n            let mut buffer: [u8; ADDRESS_NOTE_BYTES_LEN] = [0; ADDRESS_NOTE_BYTES_LEN];\n\n            let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n            let note_type_id_bytes: [u8; 32] = AddressNote::get_note_type_id().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = storage_slot_bytes[i];\n                buffer[32 + i] = note_type_id_bytes[i];\n            }\n\n            for i in 0..serialized_note.len() {\n                let bytes: [u8; 32] = serialized_note[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n            buffer\n        }\n    }\n\n    impl AddressNote {\n        pub fn new(address: AztecAddress, owner: AztecAddress, randomness: Field) -> Self {\n            AddressNote { address, owner, randomness, header: NoteHeader::empty() }\n        }\n    }\n\n    #[test]\n    fn test_encrypted_note_log_incoming_body_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let note = AddressNote::new(\n            AztecAddress::from_field(0x1),\n            AztecAddress::from_field(0x2),\n            3\n        );\n\n        let storage_slot = 2;\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        /// 1. `EncryptedLogIncomingBody::from_note` calls `note.to_be_bytes(storage_slot)` function which serializes\n        /// the note to bytes - note that in the case of `AddressNote` the `to_be_bytes` function was automatically\n        /// implemented by Aztec macros.\n        let body = EncryptedLogIncomingBody::from_note(note, storage_slot);\n\n        /// 2. `body.compute_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    struct TestEvent {\n        value0: Field,\n        value1: Field,\n        value2: Field,\n    }\n\n    impl Serialize<3> for TestEvent {\n        fn serialize(self) -> [Field; 3] {\n            [self.value0, self.value1, self.value2]\n        }\n    }\n\n    global TEST_EVENT_LEN: Field = 3;\n    global TEST_EVENT_BYTES_LEN = 32 * 3 + 64;\n    global TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS = 32 * 3 + 32;\n\n    impl EventInterface<TEST_EVENT_BYTES_LEN, TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS> for TestEvent {\n        fn get_event_type_id() -> EventSelector {\n            comptime { EventSelector::from_signature(\"TestEvent(Field,Field,Field)\") }\n        }\n\n        fn private_to_be_bytes(self, randomness: Field) -> [u8; TEST_EVENT_BYTES_LEN] {\n            let mut buffer: [u8; TEST_EVENT_BYTES_LEN] = [0; TEST_EVENT_BYTES_LEN];\n\n            let randomness_bytes: [u8; 32] = randomness.to_be_bytes();\n            let event_type_id_bytes: [u8; 32] = TestEvent::get_event_type_id().to_field().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = randomness_bytes[i];\n                buffer[32 + i] = event_type_id_bytes[i];\n            }\n\n            let serialized_event = self.serialize();\n\n            for i in 0..serialized_event.len() {\n                let bytes: [u8; 32] = serialized_event[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n\n            buffer\n        }\n\n        fn to_be_bytes(self) -> [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] {\n             let mut buffer: [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] = [0; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS];\n\n             let event_type_id_bytes: [u8; 32] = TestEvent::get_event_type_id().to_field().to_be_bytes();\n\n             for i in 0..32 {\n                 buffer[i] = event_type_id_bytes[i];\n            }\n\n             let serialized_event = self.serialize();\n\n             for i in 0..serialized_event.len() {\n                 let bytes: [u8; 32] = serialized_event[i].to_be_bytes();\n                 for j in 0..32 {\n                     buffer[32 + i * 32 + j] = bytes[j];\n                }\n            }\n\n             buffer\n        }\n\n        fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n            _emit(self);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_event_incoming_body() {\n        let test_event = TestEvent { value0: 1, value1: 2, value2: 3 };\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        let randomness = 2;\n\n        let body = EncryptedLogIncomingBody::from_event(test_event, randomness);\n\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_event_log_incoming_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let event_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 185, 29, 14, 152, 216, 130, 219, 151, 80, 185, 43, 223, 167, 8, 89, 189, 88, 188, 101, 137, 255, 136, 84, 252, 79, 18, 52, 3, 110, 54, 54, 206, 244, 209, 246, 226, 207, 247, 143, 253, 211, 75, 160, 224, 172, 41, 45, 7, 208, 137, 90, 56, 59, 4, 234, 48, 53, 23, 130, 230, 49, 249, 142, 243, 170, 72, 183, 242, 49, 124, 46, 52, 198, 75, 55, 102, 56, 89, 254, 67, 59, 157, 249, 120, 184, 67, 154, 16, 148, 227, 93, 37, 120, 199, 93, 166, 80, 127, 173, 52, 80, 135, 87, 1, 168, 164, 51, 48, 126, 120, 47, 102, 211, 227, 234, 170, 208, 99, 111, 198, 170, 226, 156, 244, 241, 174, 206, 30\n        ];\n\n        assert_eq(event_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..event_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], event_body_ciphertext_from_typescript[i]);\n        }\n    }\n}\n"},"103":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\nstruct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nfn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"104":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::get_current_public_keys, public_keys::{OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_note_log, oracle::logs_traits::LensForEncryptedLog\n};\nuse dep::protocol_types::{\n    hash::sha256_to_field, address::AztecAddress, point::Point, abis::note_hash::NoteHash,\n    constants::MAX_NOTE_HASHES_PER_CALL\n};\n\nunconstrained fn compute_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note\n) -> ([u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    compute(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note\n    )\n}\n\nfn compute<Note, let N: u32, let NB: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note\n) -> ([u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let encrypted_log: [u8; M] = compute_encrypted_note_log(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n    (encrypted_log, log_hash)\n}\n\nfn emit_with_keys<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    inner_compute: fn(AztecAddress, Field, Field, OvpkM, IvpkM, AztecAddress, Note) -> ([u8; M], Field)\n) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n    let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n    let (encrypted_log, log_hash) = inner_compute(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note\n    );\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n\npub fn encode_and_encrypt_note<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovpk = get_current_public_keys(context, ov).ovpk_m;\n        let ivpk = get_current_public_keys(context, iv).ivpk_m;\n        emit_with_keys(context, e.note, ovpk, ivpk, iv, compute);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovpk = get_current_public_keys(context, ov).ovpk_m;\n        let ivpk = get_current_public_keys(context, iv).ivpk_m;\n        emit_with_keys(context, e.note, ovpk, ivpk, iv, compute_unconstrained);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        emit_with_keys(context, e.note, ovpk, ivpk, recipient, compute);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        emit_with_keys(context, e.note, ovpk, ivpk, recipient, compute_unconstrained);\n    }\n}\n"},"105":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/outgoing_body.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::aes128::aes128_encrypt;\n\nuse crate::{keys::public_keys::IvpkM, utils::point::point_to_bytes};\n\nstruct EncryptedLogOutgoingBody {\n    eph_sk: Scalar,\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n}\n\nimpl EncryptedLogOutgoingBody {\n    pub fn new(eph_sk: Scalar, recipient: AztecAddress, recipient_ivpk: IvpkM) -> Self {\n        Self { eph_sk, recipient, recipient_ivpk }\n    }\n\n    /// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n    /// be able to derive the key with which the incoming log can be decrypted.\n    pub fn compute_ciphertext(self, ovsk_app: Scalar, eph_pk: Point) -> [u8; 144] {\n        // Again, we could compute `eph_pk` here, but we keep the interface more similar\n        // and also make it easier to optimise it later as we just pass it along\n\n        let mut buffer = [0 as u8; 128];\n\n        let serialized_eph_sk_high: [u8; 32] = self.eph_sk.hi.to_be_bytes();\n        let serialized_eph_sk_low: [u8; 32] = self.eph_sk.lo.to_be_bytes();\n\n        let address_bytes: [u8; 32] = self.recipient.to_field().to_be_bytes();\n        let serialized_recipient_ivpk = point_to_bytes(self.recipient_ivpk.to_point());\n\n        for i in 0..32 {\n            buffer[i] = serialized_eph_sk_high[i];\n            buffer[i + 32] = serialized_eph_sk_low[i];\n            buffer[i + 64] = address_bytes[i];\n        }\n        for i in 0..32 {\n            buffer[i + 96] = serialized_recipient_ivpk[i];\n        }\n\n        // We compute the symmetric key using poseidon.\n        let full_key: [u8; 32] = poseidon2_hash_with_separator(\n            [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n            GENERATOR_INDEX__SYMMETRIC_KEY as Field\n        ).to_be_bytes();\n\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(buffer, iv, sym_key).as_array()\n    }\n}\n\nmod test {\n    use crate::{encrypted_logs::outgoing_body::EncryptedLogOutgoingBody, keys::public_keys::IvpkM};\n    use dep::protocol_types::{\n        address::AztecAddress, traits::Empty, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        scalar::Scalar, point::Point, hash::poseidon2_hash_with_separator\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n\n    use crate::context::PrivateContext;\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let body = EncryptedLogOutgoingBody::new(eph_sk, recipient, recipient_ivpk);\n\n        let ciphertext = body.compute_ciphertext(sender_ovsk_app, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n"},"107":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\nuse std::{\n    embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    event::event_interface::EventInterface, oracle::unsafe_rand::unsafe_rand,\n    utils::point::point_to_bytes, note::note_interface::NoteInterface,\n    encrypted_logs::{\n    header::EncryptedLogHeader, incoming_body::EncryptedLogIncomingBody,\n    outgoing_body::EncryptedLogOutgoingBody\n},\n    keys::public_keys::{OvpkM, IvpkM}\n};\n\npub fn compute_encrypted_event_log<Event, let NB: u32, let MB: u32, let OB: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    event: Event\n) -> [u8; OB] where Event: EventInterface<NB, MB> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_event(event, randomness).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; OB] = [0; OB];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = OB - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\npub fn compute_encrypted_note_log<Note, let N: u32, let NB: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note\n) -> [u8; M] where Note: NoteInterface<N, NB> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_note(note, storage_slot).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(unsafe_rand());\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::compute_encrypted_note_log, keys::public_keys::{OvpkM, IvpkM},\n        test::mocks::mock_note::MockNoteBuilder\n    };\n    use dep::protocol_types::{address::AztecAddress, point::Point};\n    use std::test::OracleMock;\n\n    #[test]\n    fn test_encrypted_note_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let storage_slot = 0x0fe46be583b71f4ab5b70c2657ff1d05cccf1d292a9369628d1a194f944e6599;\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let note_value = 0x301640ceea758391b2e161c92c0513f129020f4125256afdae2646ce31099f5c;\n        let note = MockNoteBuilder::new(note_value).contract_address(contract_address).storage_slot(storage_slot).build();\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_note_log(\n            contract_address,\n            storage_slot,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            note\n        );\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_note_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 205, 103, 212, 60, 151, 141, 10, 151, 222, 151, 180, 43, 91, 148, 201, 110, 165, 10, 238, 32, 134, 235, 99, 216, 200, 182, 31, 22, 156, 18, 209, 222, 172, 239, 193, 212, 86, 99, 62, 70, 182, 45, 175, 241, 91, 202, 179, 225, 236, 95, 71, 66, 151, 225, 203, 53, 216, 85, 102, 130, 6, 8, 25, 180, 86, 58, 140, 198, 105, 102, 177, 42, 94, 115, 247, 145, 147, 24, 231, 39, 73, 27, 10, 219, 130, 115, 188, 74, 114, 5, 177, 199, 83, 183, 106, 87, 204, 238, 231, 72, 45, 240, 39, 174, 25, 98, 53, 187, 156, 159, 244, 38\n        ];\n        for i in 0..encrypted_note_log_from_typescript.len() {\n            assert_eq(log[i], encrypted_note_log_from_typescript[i]);\n        }\n        assert_eq(encrypted_note_log_from_typescript.len(), log.len());\n    }\n}\n"},"121":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/unsafe_rand.nr","source":"#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n\n// Called `unsafe_rand` because we do not constrain in circuit that we are dealing with an actual random value.\n// Instead we just trust our PXE.\nunconstrained pub fn unsafe_rand() -> Field {\n    rand_oracle()\n}\n"},"122":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"124":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"125":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"126":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter)\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\nunconstrained pub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) -> Field {\n    notify_nullified_note_oracle(nullifier, note_hash, counter)\n}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let NB: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N, NB> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n"},"127":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n"},"128":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"129":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n"},"132":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(address: Field, storage_slot: Field, block_number: Field, length: Field) -> [Field; N] {}\n\nunconstrained pub fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field\n    )\n}\n\nunconstrained pub fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> T where T: Deserialize<N> {\n    T::deserialize(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::address::AztecAddress;\n\n    use std::test::OracleMock;\n    use crate::test::mocks::mock_struct::MockStruct;\n\n    global address = AztecAddress::from_field(29);\n    global slot = 7;\n    global block_number = 17;\n\n    #[test]\n    fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"},"133":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::{address::AztecAddress, point::Point};\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(_note_hash_counter: u32, _encrypted_note: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_note_log<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(_contract_address: AztecAddress, _randomness: Field, _encrypted_event: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_event_log<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedNoteLog)]\nunconstrained fn compute_encrypted_note_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_note_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_note_log_oracle(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedEventLog)]\nunconstrained fn compute_encrypted_event_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _event_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_event_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    event_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_event_log_oracle(\n        contract_address,\n        randomness,\n        event_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_oracle_private<T>(_contract_address: AztecAddress, _message: T, _counter: u32) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log_private_internal<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32\n) -> Field {\n    emit_unencrypted_log_oracle_private(contract_address, message, counter)\n}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n\nunconstrained pub fn emit_contract_class_unencrypted_log_private_internal<let N: u32>(contract_address: AztecAddress, message: [Field; N], counter: u32) -> Field {\n    emit_contract_class_unencrypted_log_private(contract_address, message, counter)\n}\n"},"136":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage,\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, public_data_tree_index: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"137":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"144":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n"},"149":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"154":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"155":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH, MAX_ARGS_LENGTH\n},\n    traits::Hash,\n    hash::{\n    pedersen_hash, compute_siloed_nullifier, sha256_to_field, pedersen_commitment,\n    poseidon2_hash_with_separator\n}\n};\n// Note: pedersen_commitment is used only as a re-export here\nuse crate::oracle::logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog};\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (n as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() <= MAX_ARGS_LENGTH, \"Args length exceeds maximum\");\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = poseidon2_hash_with_separator(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = poseidon2_hash_with_separator(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        poseidon2_hash_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..MAX_ARGS_LENGTH {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x1cce4dbf69f14c44865919991ee1057922e34d7310ba237d71759aa422621ca9);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"157":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/keys/stored_keys.nr","source":"use crate::keys::public_keys::{PublicKeys, PUBLIC_KEYS_LENGTH};\nuse dep::protocol_types::traits::{Serialize, Deserialize};\n\n// This struct represents how public keys are stored in the key registry. We store not just the keys themselves but also\n// their hash, so that when reading in private we can perform a historical read for the hash and then show that it\n// corresponds to a preimage obtained from an unconstrained hint. We do store the keys keys regardless as they might be\n// needed during public execution, and since we need to broadcast and produce hints in some standardized way.\n// While it might seem odd to create a struct for what is effectively some data and a pure function called on it, state\n// variables rely on serializable structs in order to persist data to storage, so we must use this abstraction.\nstruct StoredKeys {\n    public_keys: PublicKeys,\n    hash: Field,\n}\n\nimpl StoredKeys {\n    // Instances of StoredKeys are expected to only be created by calling this function so that we guarantee that the\n    // hash field does indeed correspond to the hash of the keys. Ideally we'd forbid direct access to the struct, but \n    // Noir doesn't yet support private members.\n    fn new(public_keys: PublicKeys) -> Self {\n        Self { public_keys, hash: public_keys.hash().inner }\n    }\n}\n\n// Our serialization is the concatenation of the public keys serialization plush the hash, so we need one extra field.\nglobal STORED_KEYS_LENGTH: u32 =  PUBLIC_KEYS_LENGTH + 1;\n\nimpl Serialize<STORED_KEYS_LENGTH> for StoredKeys {\n    fn serialize(self) -> [Field; STORED_KEYS_LENGTH] {\n        // The code below is equivalent to:\n        // [ ...self.public_keys.serialize(), self.hash ]\n\n        let mut array = [0; STORED_KEYS_LENGTH];\n\n        let serialized_keys = self.public_keys.serialize();\n        for i in 0..serialized_keys.len() {\n            array[i] = serialized_keys[i];\n        }\n\n        array[PUBLIC_KEYS_LENGTH] = self.hash;\n\n        array\n    }\n}\n\nimpl Deserialize<STORED_KEYS_LENGTH> for StoredKeys {\n    fn deserialize(array: [Field; STORED_KEYS_LENGTH]) -> Self {\n        // The code below is equivalent to:\n        // Self { public_keys: PublicKeys::deserialize(array[0 : PUBLIC_KEYS_LENGTH]), hash: array[PUBLIC_KEYS_LENGTH] }\n\n        let mut serialized_keys = [0; PUBLIC_KEYS_LENGTH];\n        for i in 0..serialized_keys.len() {\n            serialized_keys[i] = array[i];\n        }\n\n        let hash = array[PUBLIC_KEYS_LENGTH];\n\n        Self { public_keys: PublicKeys::deserialize(serialized_keys), hash }\n    }\n}\n"},"159":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nfn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"161":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::{\n    header::Header, abis::validation_requests::KeyValidationRequest, address::AztecAddress,\n    constants::CANONICAL_KEY_REGISTRY_ADDRESS, point::Point, storage::map::derive_storage_slot_in_map,\n    traits::is_empty\n};\nuse crate::{\n    context::{PrivateContext, UnconstrainedContext},\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{\n    public_keys::{PublicKeys, PUBLIC_KEYS_LENGTH}, stored_keys::StoredKeys,\n    constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX, TAGGING_INDEX}\n},\n    state_vars::{\n    shared_mutable::shared_mutable_private_getter::SharedMutablePrivateGetter,\n    public_mutable::PublicMutable, map::Map\n}\n};\n\nmod test;\n\n// This is the number of blocks that must pass after a key rotation event until the old keys are fully phased out and\n// become invalid.\nglobal KEY_REGISTRY_UPDATE_BLOCKS = 5;\n\nglobal KEY_REGISTRY_STORAGE_SLOT = 1;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// Returns all current public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_current_public_keys(context: &mut PrivateContext, account: AztecAddress) -> PublicKeys {\n    // We're going to perform historical reads from public storage, and so need to constrain the caller so that they\n    // cannot use very old blocks when constructing proofs, and hence e.g. read very old keys. We are lax and allow\n    // _any_ recent block number to be used, regardless of whether there may have been a recent key rotation. This means\n    // that multiple sets of keys are valid for a while immediately after rotation, until the old keys become phased\n    // out. We *must* be lax to prevent denial of service and transaction fingerprinting attacks by accounts that rotate\n    // their keys frequently.\n    // Note that we constrain the max block number even if the registry ends up being empty: this ensures that proof of\n    // an empty registry is also fresh.\n    let current_header = context.get_header();\n    context.set_tx_max_block_number(current_header.global_variables.block_number as u32 + KEY_REGISTRY_UPDATE_BLOCKS);\n\n    get_historical_public_keys(current_header, account)\n}\n\n// Returns historical public keys for a given account at some block determined by a block header. We read all keys at\n// once since the constraints for reading them all are actually fewer than if we read them one at a time - any read keys\n// that are not required by the caller can simply be discarded.\n// WARNING: if called with a historical header created from a fixed block this function will explicitly ignore key\n// rotation! This means that callers of this may force a user to use old keys, potentially leaking privacy (e.g. if the\n// old keys were leaked). Only call this function with a header from a fixed block if you understand the implications of\n// breaking key rotation very well.\npub fn get_historical_public_keys(historical_header: Header, account: AztecAddress) -> PublicKeys {\n    // TODO: improve this so that we always hint the correct set of keys (either registry or canonical) and hash them\n    // once instead of having two different hints and twice as many constraints due to the double hashing.\n\n    // The key registry is the primary source of information for keys, as that's where accounts store their new keys\n    // when they perform rotation. The key registry conveniently stores a hash of each user's keys, so we can read that\n    // single field and then prove that we know its preimage (i.e. the current set of keys).\n    let key_registry_hash = key_registry_hash_public_historical_read(historical_header, account);\n    if key_registry_hash != 0 {\n        let hinted_registry_public_keys = key_registry_get_stored_keys_hint(\n            account,\n            historical_header.global_variables.block_number as u32\n        );\n        assert_eq(hinted_registry_public_keys.hash().to_field(), key_registry_hash);\n\n        hinted_registry_public_keys\n    } else {\n        // If nothing was written to the registry, we may still be able to produce the correct keys if we happen to know\n        // the canonical set (i.e. the ones that are part of the account's preimage).\n        let (hinted_canonical_public_keys, partial_address) = get_public_keys_and_partial_address(account);\n        assert_eq(\n            account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n        );\n\n        hinted_canonical_public_keys\n    }\n}\n\nfn key_registry_hash_public_historical_read(historical_header: Header, account: AztecAddress) -> Field {\n    // The keys are stored in a Map that is keyed with the address of each account, so we first derive the corresponding\n    // slot for this account.\n    let keys_storage_slot = derive_storage_slot_in_map(KEY_REGISTRY_STORAGE_SLOT, account);\n\n    // The keys are stored as [ ...serialized_keys, hash ], and since arrays get allocated sequential storage slots\n    // (prior to siloing!), we simply add the length to the base slot to get the last element.\n    let hash_storage_slot = keys_storage_slot + PUBLIC_KEYS_LENGTH as Field;\n\n    historical_header.public_storage_historical_read(hash_storage_slot, CANONICAL_KEY_REGISTRY_ADDRESS)\n}\n\nunconstrained fn key_registry_get_stored_keys_hint(account: AztecAddress, block_number: u32) -> PublicKeys {\n    // This is equivalent to the key registry contract having an unconstrained getter that we call from an oracle, but\n    // PXE does not yet support that functionality so we do this manually instad. Note that this would be a *historical*\n    // call!\n\n    // TODO (#7524): call the unconstrained KeyRegistry.get_current_keys() function instead\n\n    let context = UnconstrainedContext::at_historical(CANONICAL_KEY_REGISTRY_ADDRESS, block_number);\n    let keys_storage = Map::new(\n        context,\n        KEY_REGISTRY_STORAGE_SLOT,\n        |context, slot| { PublicMutable::new(context, slot) }\n    );\n\n    let stored_keys: StoredKeys = keys_storage.at(account).read();\n    stored_keys.public_keys\n}\n"},"162":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\nuse crate::keys::constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\nstruct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\ntrait ToPoint {\n    fn to_point(self) -> Point;\n}\n\nstruct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nstruct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nstruct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nstruct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m : NpkM { inner: Point::empty() },\n            ivpk_m : IvpkM { inner: Point::empty() },\n            ovpk_m : OvpkM { inner: Point::empty() },\n            tpk_m : TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        ( self.npk_m.inner == other.npk_m.inner ) &\n        ( self.ivpk_m.inner == other.ivpk_m.inner ) &\n        ( self.ovpk_m.inner == other.ovpk_m.inner ) &\n        ( self.tpk_m.inner == other.tpk_m.inner )\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x:serialized[0], y:serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x:serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x:serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x:serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nfn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nfn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"168":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/state_vars/private_mutable.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n    hash::poseidon2_hash_with_separator\n};\n\nuse crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note_unsafe}, note_getter::{get_note, view_notes},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions, note_emission::NoteEmission\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateMutable<Note, Context> {\n    context: Context,\n    storage_slot: Field\n}\n// docs:end:struct\n\nmod test;\n\nimpl<T, Context> Storage<T> for PrivateMutable<T, Context> {}\n\nimpl<Note, Context> PrivateMutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateMutable>` type (for example), because the storage slot often also identifies an actor. e.g.\n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_nullifier()` method of the underlying note is designed to ensure privacy.\n    // For example, if the `compute_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n}\n\nimpl<Note, N, M> PrivateMutable<Note, &mut PrivateContext> where Note: NoteInterface<N, M> {\n    // docs:start:initialize\n    pub fn initialize(self, note: &mut Note) -> NoteEmission<Note> {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(self, new_note: &mut Note) -> NoteEmission<Note> {\n        let (prev_note, note_hash_for_read_request): (Note, Field) = get_note(self.context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note_unsafe(self.context, prev_note, note_hash_for_read_request);\n\n        // Add replacement note.\n        create_note(self.context, self.storage_slot, new_note)\n    }\n    // docs:end:replace\n\n    pub fn initialize_or_replace(self, note: &mut Note) -> NoteEmission<Note> {\n        let is_initialized = unsafe {\n            check_nullifier_exists(self.compute_initialization_nullifier())\n        };\n\n        // check_nullifier_exists() is an unconstrained function - we can constrain a true value by providing an\n        // inclusion proof of the nullifier, but cannot constrain a false value since a non-inclusion proof would only\n        // be valid if done in public.\n        // Ultimately, this is not an issue ginen that we'll either:\n        //  - initialize the state variable, which would fail if it was already initialized due to the duplicate\n        //    nullifier, or\n        //  - replace the current value, which would fail if it was not initialized since we wouldn't be able to produce\n        //    an inclusion proof for the current note\n        // This means that an honest oracle will assist the prover to produce a valid proof, while a malicious oracle\n        // (i.e. one that returns an incorrect value for is_initialized) will simply fail to produce a proof.\n        if (!is_initialized) {\n            self.initialize(note)\n        } else {\n            self.replace(note)\n        }\n    }\n\n    // docs:start:get_note\n    pub fn get_note(self) -> NoteEmission<Note> {\n        let mut (note, note_hash_for_read_request) = get_note(self.context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note_unsafe(self.context, note, note_hash_for_read_request);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(self.context, self.storage_slot, &mut note)\n    }\n    // docs:end:get_note\n}\n\nimpl<Note, N, M> PrivateMutable<Note, UnconstrainedContext> where Note: NoteInterface<N, M> {\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n"},"170":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n\n"},"179":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::oracle::storage::storage_read;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, UnconstrainedContext> where T: Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"2":{"path":"std/array.nr","source":"use crate::cmp::Ord;\nuse crate::convert::From;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    pub fn sort(self) -> Self where T: Ord {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        let sorted_index = unsafe {\n            // Safety: These indices are asserted to be the sorted element indices via `find_index`\n            let sorted_index: [u32; N] = self.get_sorting_index(ordering);\n\n            for i in 0..N {\n                let pos = find_index(sorted_index, i);\n                assert(sorted_index[pos] == i);\n            }\n\n            sorted_index\n        };\n\n        // Sort the array using the indexes\n        let mut result = self;\n        for i in 0..N {\n            result[i] = self[sorted_index[i]];\n        }\n        // Ensure the array is sorted\n        for i in 0..N - 1 {\n            assert(ordering(result[i], result[i + 1]));\n        }\n\n        result\n    }\n\n    /// Returns the index of the elements in the array that would sort it, using the provided custom sorting function.\n    unconstrained fn get_sorting_index<Env>(self, ordering: fn[Env](T, T) -> bool) -> [u32; N] {\n        let mut result = [0; N];\n        let mut a = self;\n        for i in 0..N {\n            result[i] = i;\n        }\n        for i in 1..N {\n            for j in 0..i {\n                if ordering(a[i], a[j]) {\n                    let old_a_j = a[j];\n                    a[j] = a[i];\n                    a[i] = old_a_j;\n                    let old_j = result[j];\n                    result[j] = result[i];\n                    result[i] = old_j;\n                }\n            }\n        }\n        result\n    }\n\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    // Apply a function to each element of an array, returning a new array\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given array as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns true if all elements in the array satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the array satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Convert a sequence of bytes as-is into a string.\n    /// This function performs no UTF-8 validation or similar.\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\n// helper function used to look up the position of a value in an array of Field\n// Note that function returns 0 if the value is not found\nunconstrained fn find_index<let N: u32>(a: [u32; N], find: u32) -> u32 {\n    let mut result = 0;\n    for i in 0..a.len() {\n        if a[i] == find {\n            result = i;\n        }\n    }\n    result\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n"},"218":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{constants::KEY_VALIDATION_REQUEST_LENGTH, traits::{Empty, Serialize, Deserialize}, point::Point};\n\nstruct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m))\n            & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest {\n            pk_m: Point::empty(),\n            sk_app: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app,\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x:fields[0], y: fields[1], is_infinite: fields[2] as bool},\n            sk_app: fields[3],\n        }\n    }\n}\n\n"},"22":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\nstruct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint { \n        EmbeddedCurvePoint {\n            x: self.x,\n            y: -self.y,\n            is_infinite: self.is_infinite\n        }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite) | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\nstruct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n// This is a hack as returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\nfn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint\n) -> EmbeddedCurvePoint\n// docs:end:embedded_curve_add\n{\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n    EmbeddedCurvePoint { x, y, is_infinite: point_array[2] == 1 }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n"},"23":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"24":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_le_radix(256)\n    }\n    // docs:end:to_le_bytes\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_be_radix(256)\n    }\n    // docs:end:to_be_bytes\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"262":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        assert(false, \"depth should be between 0 and 10\");\n        0\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"27":{"path":"std/hash/mod.nr","source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod keccak;\nmod sha256;\nmod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    __pedersen_hash_with_separator(input, separator)\n}\n\nfn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    __pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n    // Same as from_field but:\n    // does not assert the limbs are 128 bits\n    // does not assert the decomposition does not overflow the EmbeddedCurveScalar\n    fn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\ntrait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n\n"},"273":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"294":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"296":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"297":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"298":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x2499880e2b1b831785c17286f99a0d5122fee784ce7b1c04e380c4a991da819a;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"300":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n"},"304":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"305":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId, hash::poseidon2_hash_with_separator,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"307":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::{eth_address::EthAddress, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"308":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{\n    eth_address::EthAddress, salted_initialization_hash::SaltedInitializationHash,\n    aztec_address::AztecAddress\n},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, FromField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH = 1;\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n       PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"312":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr","source":"// Utility function to console.log data in the acir simulator\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n\n/// NOTE: call this with a str<N> msg of form\n/// \"some string with {0} and {1} ... {N}\"\n/// and an array of N field which will be formatted\n/// into the string in the simulator.\n/// Example:\n/// debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n/// debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\nunconstrained pub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n/// NOTE: call this with a str<N> msg of length > 1\n/// Example:\n/// `debug_log(\"blah blah this is a debug string\");`\nunconstrained pub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n"},"313":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc, point::Point\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"314":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: Field = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point {\n            x: 0,\n            y: 0,\n            is_infinite: false\n        }\n    }\n}\n"},"32":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n"},"325":{"path":"/Users/yashbharti/Desktop/Engineering/core_projects/alpha-build-1/aztecWallet/src/noir_contracts/ecdsa_public_key_note/src/main.nr","source":"use dep::aztec::prelude::{AztecAddress, FunctionSelector, NoteHeader, NoteInterface, NoteGetterOptions, PrivateContext};\n\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, keys::getters::get_nsk_app,\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator}\n};\n\nglobal ECDSA_PUBLIC_KEY_NOTE_LEN: Field = 5;\n// ECDSA_PUBLIC_KEY_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal ECDSA_PUBLIC_KEY_NOTE_BYTES_LEN: Field = 5 * 32 + 64;\n\n// Stores an ECDSA public key composed of two 32-byte elements\n// TODO: Do we need to include a nonce, in case we want to read/nullify/recreate with the same pubkey value?\n#[aztec(note)]\nstruct EcdsaPublicKeyNote {\n    x: [u8; 32],\n    y: [u8; 32],\n    // We store the npk_m_hash only to get the secret key to compute the nullifier\n    npk_m_hash: Field,\n}\n\nimpl NoteInterface<ECDSA_PUBLIC_KEY_NOTE_LEN, ECDSA_PUBLIC_KEY_NOTE_BYTES_LEN> for EcdsaPublicKeyNote {\n    // Cannot use the automatic serialization since x and y don't fit. Serialize the note as 5 fields where:\n    // [0] = x[0..31] (upper bound excluded)\n    // [1] = x[31]\n    // [2] = y[0..31]\n    // [3] = y[31]\n    // [4] = npk_m_hash\n    fn serialize_content(self) -> [Field; ECDSA_PUBLIC_KEY_NOTE_LEN] {\n        let mut x: Field = 0;\n        let mut y: Field = 0;\n        let mut mul: Field = 1;\n\n        for i in 1..32 {\n          let byte_x: Field = self.x[31 - i] as Field;\n          x = x + (byte_x * mul);\n          let byte_y: Field = self.y[31 - i] as Field;\n          y = y + (byte_y * mul);\n          mul *= 256;\n        }\n\n        let last_x = self.x[31] as Field;\n        let last_y = self.y[31] as Field;\n\n        [x, last_x, y, last_y, self.npk_m_hash]\n    }\n\n    // Cannot use the automatic deserialization for the aforementioned reasons\n    fn deserialize_content(serialized_note: [Field; ECDSA_PUBLIC_KEY_NOTE_LEN]) -> EcdsaPublicKeyNote {\n        let mut x: [u8; 32] = [0; 32];\n        let mut y: [u8; 32] = [0; 32];\n\n        let part_x:[u8; 32] = serialized_note[0].to_be_bytes();\n        for i in 0..31 {\n            x[i] = part_x[i + 1];\n        }\n        x[31] = serialized_note[1].to_be_bytes::<32>()[31];\n\n        let part_y:[u8; 32] = serialized_note[2].to_be_bytes();\n        for i in 0..31 {\n            y[i] = part_y[i + 1];\n        }\n        y[31] = serialized_note[3].to_be_bytes::<32>()[31];\n\n        EcdsaPublicKeyNote { x, y, npk_m_hash: serialized_note[4], header: NoteHeader::empty() }\n    }\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret,\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl EcdsaPublicKeyNote {\n    pub fn new(x: [u8; 32], y: [u8; 32], npk_m_hash: Field) -> Self {\n        EcdsaPublicKeyNote { x, y, npk_m_hash, header: NoteHeader::empty() }\n    }\n}"},"5":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\nstruct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Get an element from the vector at the given index.\n    /// Panics if the given index points beyond the end of the vector (`self.len()`).\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Get an element from the vector at the given index.\n    /// Responds with undefined data for `index` where `self.len < index < self.max_len()`.\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Write an element to the vector at the given index.\n    /// Panics if the given index points beyond the end of the vector (`self.len()`).\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Write an element to the vector at the given index.\n    /// Does not check whether the passed `index` is a valid index within the vector.\n    ///\n    /// Silently writes past the end of the vector for `index` where `self.len < index < self.max_len()`\n    /// Panics if the given index points beyond the maximum length of the vector (`self.max_len()`).\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        \n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen>  {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"55":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n"},"66":{"path":"/Users/yashbharti/Desktop/Engineering/core_projects/alpha-build-1/aztecWallet/src/noir_contracts/security_options/src/main.nr","source":"// Account contract that uses ECDSA signatures for authentication on the same curve as Ethereum.\n// The signing key is stored in a mutable private note and can be rotated.\ncontract EcdsaKAccountwithKeyRotation {\n    use dep::aztec::prelude::{PrivateContext, PrivateMutable};\n    use dep::aztec::{\n        encrypted_logs::encrypted_note_emission::encode_and_encrypt_note,\n        keys::getters::get_current_public_keys\n    };\n    use dep::authwit::{\n        entrypoint::{app::AppPayload, fee::FeePayload}, account::AccountActions,\n        auth_witness::get_auth_witness\n    };\n    use dep::ecdsa_public_key_note::EcdsaPublicKeyNote;\n\n    #[aztec(storage)]\n    struct Storage {\n        public_key: PrivateMutable<EcdsaPublicKeyNote>,\n    }\n\n    // Creates a new account out of an ECDSA public key to use for signature verification\n    #[aztec(private)]\n    #[aztec(initializer)]\n    fn constructor(signing_pub_key_x: [u8; 32], signing_pub_key_y: [u8; 32]) {\n        let this = context.this_address();\n        let this_keys = get_current_public_keys(&mut context, this);\n        let mut pub_key_note = EcdsaPublicKeyNote::new(signing_pub_key_x, signing_pub_key_y, this_keys.npk_m.hash());\n        storage.public_key.initialize(&mut pub_key_note).emit(encode_and_encrypt_note(&mut context, this, this));\n    }\n\n    // Note: If you globally change the entrypoint signature don't forget to update account_entrypoint.ts\n    #[aztec(private)]\n    fn entrypoint(app_payload: AppPayload, fee_payload: FeePayload, cancellable: bool) {\n        let actions = AccountActions::init(&mut context, is_valid_impl);\n        actions.entrypoint(app_payload, fee_payload, cancellable);\n    }\n\n    #[aztec(private)]\n    #[aztec(noinitcheck)]\n    #[aztec(view)]\n    fn verify_private_authwit(inner_hash: Field) -> Field {\n        let actions = AccountActions::init(&mut context, is_valid_impl);\n        actions.verify_private_authwit(inner_hash)\n    }\n\n   #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, outer_hash: Field) -> bool {\n        // Load public key from storage\n        let storage = Storage::init(context);\n        let public_key_emission = storage.public_key.get_note();\n        let public_key = public_key_emission.note; // Access the actual note\n\n        // Load auth witness\n        let witness: [Field; 64] = unsafe {\n            get_auth_witness(outer_hash)\n        };\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 {\n            signature[i] = witness[i] as u8;\n        }\n\n        // Verify payload signature using Ethereum's signing scheme\n        let outer_hash_bytes: [u8; 32] = outer_hash.to_be_bytes();\n        let hashed_message: [u8; 32] = std::hash::sha256(outer_hash_bytes);\n        std::ecdsa_secp256k1::verify_signature(public_key.x, public_key.y, signature, hashed_message)\n    }\n\n    // Function to rotate the ECDSA public key\n    #[aztec(private)]\n    fn rotate_key(new_signing_pub_key_x: [u8; 32], new_signing_pub_key_y: [u8; 32]) {\n        let this = context.this_address();\n        let this_keys = get_current_public_keys(&mut context, this);\n        \n        // Verify that the caller is authorized to rotate the key\n        assert(is_valid_impl(&mut context, context.get_args_hash()), \"Unauthorized key rotation\");\n        \n        // Create a new EcdsaPublicKeyNote with the new public key\n        let mut new_pub_key_note = EcdsaPublicKeyNote::new(new_signing_pub_key_x, new_signing_pub_key_y, this_keys.npk_m.hash());\n        \n        // Replace the current public key note with the new one\n        storage.public_key.replace(&mut new_pub_key_note).emit(encode_and_encrypt_note(&mut context, this, this));\n    }\n}"},"69":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/authwit/src/auth.nr","source":"use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{\n    GENERATOR_INDEX__AUTHWIT_INNER, GENERATOR_INDEX__AUTHWIT_OUTER, GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    CANONICAL_AUTH_REGISTRY_ADDRESS\n},\n    hash::poseidon2_hash_with_separator\n};\nuse dep::aztec::{prelude::Deserialize, context::{PrivateContext, PublicContext, gas::GasOpts}, hash::hash_args_array};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `keccak256(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\nglobal IS_VALID_SELECTOR = 0xabf64ad4; // 4 first bytes of keccak256(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([context.msg_sender().to_field(), context.selector().to_field(), context.args_hash]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that have authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress, inner_hash: Field) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context.static_call_private_function(\n        on_behalf_of,\n        comptime {\n        FunctionSelector::from_signature(\"verify_private_authwit(Field)\")\n    },\n        [inner_hash]\n    ).unpack_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allow same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` have authorized the current call in the authentication registry\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash(\n        [(*context).msg_sender().to_field(), (*context).selector().to_field(), (*context).get_args_hash()]\n    );\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` have authorized a speicifc `inner_hash` in the authentication registry\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that have authorized the `inner_hash`\n */\npub fn assert_inner_hash_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress, inner_hash: Field) {\n    let result: Field = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime {\n        FunctionSelector::from_signature(\"consume((Field),Field)\")\n    },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default()\n    ).deserialize_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N]\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash = compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computs the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that have authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(consumer: AztecAddress, chain_id: Field, version: Field, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        consumer.to_field(),\n        chain_id,\n        version,\n        inner_hash\n    ],\n        GENERATOR_INDEX__AUTHWIT_OUTER\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub fn set_authorized(context: &mut PublicContext, message_hash: Field, authorize: bool) {\n    context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime {\n        FunctionSelector::from_signature(\"set_authorized(Field,bool)\")\n    },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default()\n    ).assert_empty();\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime {\n        FunctionSelector::from_signature(\"set_reject_all(bool)\")\n    },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default()\n    ).assert_empty();\n}\n"},"70":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/authwit/src/auth_witness.nr","source":"#[oracle(getAuthWitness)]\nunconstrained fn get_auth_witness_oracle<let N: u32>(_message_hash: Field) -> [Field; N] {}\n\n/**\n * Oracle wrapper to fetch an `auth_witness` for a given `message_hash` from the PXE.\n * \n * @param message_hash The hash of the message for which the `auth_witness` is to be fetched.\n * @return The `auth_witness` for the given `message_hash` as Field array.\n */\nunconstrained pub fn get_auth_witness<let N: u32>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}\n"},"71":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/authwit/src/entrypoint/fee.nr","source":"use dep::aztec::prelude::PrivateContext;\nuse dep::aztec::protocol_types::{\n    constants::GENERATOR_INDEX__FEE_PAYLOAD, hash::poseidon2_hash_with_separator,\n    traits::{Hash, Serialize}\n};\nuse crate::entrypoint::function_call::FunctionCall;\n\n// 2 * 5 (FUNCTION_CALL_SIZE) + 2\nglobal FEE_PAYLOAD_SIZE: Field = 12;\n\n// 2 * 98 (FUNCTION_CALL_SIZE_IN_BYTES) + 32\nglobal FEE_PAYLOAD_SIZE_IN_BYTES: Field = 228;\n\nglobal MAX_FEE_FUNCTION_CALLS = 2;\n\n// docs:start:fee-payload-struct\nstruct FeePayload {\n  function_calls: [FunctionCall; MAX_FEE_FUNCTION_CALLS],\n  nonce: Field,\n  is_fee_payer: bool,\n}\n// docs:end:fee-payload-struct\n\nimpl Serialize<FEE_PAYLOAD_SIZE> for FeePayload {\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; FEE_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, FEE_PAYLOAD_SIZE> = BoundedVec::new();\n    for i in 0..MAX_FEE_FUNCTION_CALLS {\n      fields.extend_from_array(self.function_calls[i].serialize());\n    }\n    fields.push(self.nonce);\n    fields.push(self.is_fee_payer as Field);\n    fields.storage\n  }\n}\n\nimpl Hash for FeePayload {\n  fn hash(self) -> Field {\n    poseidon2_hash_with_separator(\n      self.serialize(),\n      GENERATOR_INDEX__FEE_PAYLOAD\n    )\n  }\n}\n\nimpl FeePayload {\n    fn to_be_bytes(self) -> [u8; FEE_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, FEE_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..MAX_FEE_FUNCTION_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_array(self.nonce.to_be_bytes::<32>());\n        bytes.push(self.is_fee_payer as u8);\n\n        bytes.storage\n    }\n\n    fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                } else {\n                    let _result = context.call_private_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                }\n            }\n        }\n        if self.is_fee_payer {\n            context.set_as_fee_payer();\n        }\n    }\n}\n"},"72":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/authwit/src/entrypoint/app.nr","source":"use dep::aztec::prelude::PrivateContext;\nuse dep::aztec::protocol_types::{\n    constants::GENERATOR_INDEX__SIGNATURE_PAYLOAD, hash::poseidon2_hash_with_separator,\n    traits::{Hash, Serialize}\n};\n\nuse crate::entrypoint::function_call::{FunctionCall, FUNCTION_CALL_SIZE_IN_BYTES};\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal APP_PAYLOAD_SIZE: u64 = 21;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal APP_PAYLOAD_SIZE_IN_BYTES: u64 = 424;\n\nglobal ACCOUNT_MAX_CALLS: u64 = 4;\n\n// Note: If you change the following struct you have to update default_entrypoint.ts\n// docs:start:app-payload-struct\nstruct AppPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:app-payload-struct\n\nimpl Serialize<APP_PAYLOAD_SIZE> for AppPayload {\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; APP_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, APP_PAYLOAD_SIZE> = BoundedVec::new();\n    for call in self.function_calls {\n      fields.extend_from_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n}\n\nimpl Hash for AppPayload {\n  fn hash(self) -> Field {\n    poseidon2_hash_with_separator(\n      self.serialize(),\n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n  }\n}\n\nimpl AppPayload {\n    // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n    fn to_be_bytes(self) -> [u8; APP_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, APP_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..ACCOUNT_MAX_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_array(self.nonce.to_be_bytes::<32>());\n\n        bytes.storage\n    }\n\n    // Executes all private and public calls\n    // docs:start:entrypoint-execute-calls\n    fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                } else {\n                    let _result = context.call_private_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                }\n            }\n        }\n    }\n    // docs:end:entrypoint-execute-calls\n}\n"},"75":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/authwit/src/account.nr","source":"use dep::aztec::{\n    context::PrivateContext,\n    protocol_types::constants::{GENERATOR_INDEX__COMBINED_PAYLOAD, GENERATOR_INDEX__TX_NULLIFIER},\n    hash::poseidon2_hash_with_separator\n};\n\nuse crate::entrypoint::{app::AppPayload, fee::FeePayload};\nuse crate::auth::{IS_VALID_SELECTOR, compute_authwit_message_hash};\n\nstruct AccountActions<Context> {\n  context: Context,\n  is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\n}\n\nimpl<Context> AccountActions<Context> {\n    pub fn init(context: Context, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n        AccountActions { context, is_valid_impl }\n    }\n}\n\n/**\n * An implementation of the Account Action struct for the private context.\n *\n * Implements logic to verify authorization and execute payloads.\n */\nimpl AccountActions<&mut PrivateContext> {\n\n    /**\n     * Verifies that the `app_hash` and `fee_hash` are authorized and then executes them.\n     *\n     * Executes the `fee_payload` and `app_payload` in sequence.\n     * Will execute the `fee_payload` as part of the setup, and then enter the app phase.\n     *\n     * @param app_payload The payload that contains the calls to be executed in the app phase.\n     * @param fee_payload The payload that contains the calls to be executed in the setup phase.\n     */\n    // docs:start:entrypoint\n    pub fn entrypoint(self, app_payload: AppPayload, fee_payload: FeePayload, cancellable: bool) {\n        let valid_fn = self.is_valid_impl;\n\n        let combined_payload_hash = poseidon2_hash_with_separator(\n            [app_payload.hash(), fee_payload.hash()],\n            GENERATOR_INDEX__COMBINED_PAYLOAD\n        );\n        assert(valid_fn(self.context, combined_payload_hash));\n\n        fee_payload.execute_calls(self.context);\n        self.context.end_setup();\n        app_payload.execute_calls(self.context);\n        if cancellable {\n            let tx_nullifier = poseidon2_hash_with_separator([app_payload.nonce], GENERATOR_INDEX__TX_NULLIFIER);\n            self.context.push_nullifier(tx_nullifier);\n        }\n    }\n    // docs:end:entrypoint\n\n    /**\n     * Verifies that the `msg_sender` is authorized to consume `inner_hash` by the account.\n     *\n     * Computes the `message_hash` using the `msg_sender`, `chain_id`, `version` and `inner_hash`.\n     * Then executes the `is_valid_impl` function to verify that the message is authorized.\n     *\n     * Will revert if the message is not authorized.\n     *\n     * @param inner_hash The hash of the message that the `msg_sender` is trying to consume.\n     */\n    // docs:start:verify_private_authwit\n    pub fn verify_private_authwit(self, inner_hash: Field) -> Field {\n        // The `inner_hash` is \"siloed\" with the `msg_sender` to ensure that only it can\n        // consume the message.\n        // This ensures that contracts cannot consume messages that are not intended for them.\n        let message_hash = compute_authwit_message_hash(\n            self.context.msg_sender(),\n            self.context.chain_id(),\n            self.context.version(),\n            inner_hash\n        );\n        let valid_fn = self.is_valid_impl;\n        assert(valid_fn(self.context, message_hash) == true, \"Message not authorized by account\");\n        IS_VALID_SELECTOR\n    }\n    // docs:end:verify_private_authwit\n}\n"},"80":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N, M>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n\n    let serialized_note = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    )\n        == 0\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, N, M>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, N, M>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, N, M>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N, M> {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    assert(notify_nullified_note(nullifier, notification_note_hash, nullifier_counter) == 0);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n\n"},"81":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32, let M: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32, let M: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in \n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in \n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the \n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the \n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from \n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let M: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N, M> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"83":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, MAX_NOTES_PER_PAGE, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32, let M: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N, M> {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N, M> + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N, M> + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32, let M: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N, M> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N, M> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32, let M: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N, M>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N, M> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"86":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\nstruct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting  \n * a change note in a token's transfer function only when there is \"change\" left).\n */\nstruct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"95":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{\n    execution::{get_chain_id, get_version, get_contract_address, get_block_number},\n    storage::{raw_storage_read, storage_read}\n};\n\nstruct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"},"97":{"path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, gas::Gas,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, public_call_stack_item::PublicCallStackItem,\n    public_call_stack_item_compressed::PublicCallStackItemCompressed, read_request::ReadRequest,\n    note_hash::NoteHash, nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = PublicCallStackItemCompressed {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty()\n        };\n\n        let call_request = PublicCallRequest { item, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = PublicCallStackItemCompressed {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty()\n        };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            item,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"}}}