{"noir_version":"0.33.0+eab944cbb77eb613e61a879312b58c415f8a0c13","name":"EcdsaKAccount","functions":[{"name":"entrypoint","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"app_payload","type":{"kind":"struct","path":"authwit::entrypoint::app::AppPayload","fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"target_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}]}}},{"name":"nonce","type":{"kind":"field"}}]},"visibility":"private"},{"name":"fee_payload","type":{"kind":"struct","path":"authwit::entrypoint::fee::FeePayload","fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"target_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}]}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"cancellable","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"","brillig_names":["get_note_internal","decompose_hint","get_auth_witness","enqueue_public_function_call_internal","call_private_function_internal","debug_log_format","notify_set_min_revertible_side_effect_counter","directive_invert","directive_integer_quotient"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":5,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"verify_private_authwit","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(noinitcheck)","aztec(view)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"","brillig_names":["get_note_internal","decompose_hint","get_auth_witness","pack_returns","directive_invert","directive_integer_quotient"]},{"name":"constructor","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(initializer)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"signing_pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signing_pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"authwit::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"","brillig_names":["get_contract_instance_internal","get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","key_registry_get_stored_keys_hint","get_public_keys_and_partial_address","notify_created_note","get_key_validation_request","unsafe_rand","emit_encrypted_note_log","directive_invert","directive_integer_quotient"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"EcdsaKAccount::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EcdsaKAccount::constructor_parameters","fields":[{"name":"signing_pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"signing_pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}}]}}]},{"kind":"struct","path":"EcdsaKAccount::verify_private_authwit_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EcdsaKAccount::verify_private_authwit_parameters","fields":[{"name":"inner_hash","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"EcdsaKAccount::entrypoint_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"EcdsaKAccount::entrypoint_parameters","fields":[{"name":"app_payload","type":{"kind":"struct","path":"authwit::entrypoint::app::AppPayload","fields":[{"name":"function_calls","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"target_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}]}}},{"name":"nonce","type":{"kind":"field"}}]}},{"name":"fee_payload","type":{"kind":"struct","path":"authwit::entrypoint::fee::FeePayload","fields":[{"name":"function_calls","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"authwit::entrypoint::function_call::FunctionCall","fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"function_selector","type":{"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"target_address","type":{"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_public","type":{"kind":"boolean"}},{"name":"is_static","type":{"kind":"boolean"}}]}}},{"name":"nonce","type":{"kind":"field"}},{"name":"is_fee_payer","type":{"kind":"boolean"}}]}},{"name":"cancellable","type":{"kind":"boolean"}}]}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000906cb9c3"},{"kind":"string","value":"EcdsaPublicKeyNote"}]}],"storage":[{"kind":"struct","fields":[{"name":"public_key","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}}]}]}},"file_map":{"2":{"source":"use crate::cmp::Ord;\nuse crate::convert::From;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    pub fn sort(self) -> Self where T: Ord {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        let sorted_index = unsafe {\n            // Safety: These indices are asserted to be the sorted element indices via `find_index`\n            let sorted_index: [u32; N] = self.get_sorting_index(ordering);\n\n            for i in 0..N {\n                let pos = find_index(sorted_index, i);\n                assert(sorted_index[pos] == i);\n            }\n\n            sorted_index\n        };\n\n        // Sort the array using the indexes\n        let mut result = self;\n        for i in 0..N {\n            result[i] = self[sorted_index[i]];\n        }\n        // Ensure the array is sorted\n        for i in 0..N - 1 {\n            assert(ordering(result[i], result[i + 1]));\n        }\n\n        result\n    }\n\n    /// Returns the index of the elements in the array that would sort it, using the provided custom sorting function.\n    unconstrained fn get_sorting_index<Env>(self, ordering: fn[Env](T, T) -> bool) -> [u32; N] {\n        let mut result = [0; N];\n        let mut a = self;\n        for i in 0..N {\n            result[i] = i;\n        }\n        for i in 1..N {\n            for j in 0..i {\n                if ordering(a[i], a[j]) {\n                    let old_a_j = a[j];\n                    a[j] = a[i];\n                    a[i] = old_a_j;\n                    let old_j = result[j];\n                    result[j] = result[i];\n                    result[i] = old_j;\n                }\n            }\n        }\n        result\n    }\n\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    // Apply a function to each element of an array, returning a new array\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given array as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns true if all elements in the array satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the array satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Convert a sequence of bytes as-is into a string.\n    /// This function performs no UTF-8 validation or similar.\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\n// helper function used to look up the position of a value in an array of Field\n// Note that function returns 0 if the value is not found\nunconstrained fn find_index<let N: u32>(a: [u32; N], find: u32) -> u32 {\n    let mut result = 0;\n    for i in 0..a.len() {\n        if a[i] == find {\n            result = i;\n        }\n    }\n    result\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n","path":"std/array.nr"},"5":{"source":"use crate::{cmp::Eq, convert::From};\n\nstruct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Get an element from the vector at the given index.\n    /// Panics if the given index points beyond the end of the vector (`self.len()`).\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Get an element from the vector at the given index.\n    /// Responds with undefined data for `index` where `self.len < index < self.max_len()`.\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Write an element to the vector at the given index.\n    /// Panics if the given index points beyond the end of the vector (`self.len()`).\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Write an element to the vector at the given index.\n    /// Does not check whether the passed `index` is a valid index within the vector.\n    ///\n    /// Silently writes past the end of the vector for `index` where `self.len < index < self.max_len()`\n    /// Panics if the given index points beyond the maximum length of the vector (`self.max_len()`).\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        \n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen>  {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"22":{"source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\nstruct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint { \n        EmbeddedCurvePoint {\n            x: self.x,\n            y: -self.y,\n            is_infinite: self.is_infinite\n        }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite) | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\nstruct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n// This is a hack as returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\nfn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint\n) -> EmbeddedCurvePoint\n// docs:end:embedded_curve_add\n{\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n    EmbeddedCurvePoint { x, y, is_infinite: point_array[2] == 1 }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n","path":"std/embedded_curve_ops.nr"},"23":{"source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"24":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_le_radix(256)\n    }\n    // docs:end:to_le_bytes\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_be_radix(256)\n    }\n    // docs:end:to_be_bytes\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_radix_example\n}\n","path":"std/field/mod.nr"},"27":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod keccak;\nmod sha256;\nmod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    __pedersen_hash_with_separator(input, separator)\n}\n\nfn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    __pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n    // Same as from_field but:\n    // does not assert the limbs are 128 bits\n    // does not assert the decomposition does not overflow the EmbeddedCurveScalar\n    fn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\ntrait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n\n","path":"std/hash/mod.nr"},"32":{"source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"55":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n","path":"std/option.nr"},"66":{"source":"// Account contract that uses ECDSA signatures for authentication on the same curve as Ethereum.\n// The signing key is stored in an immutable private note and should be different from the signing key.\ncontract EcdsaKAccount {\n    use dep::aztec::prelude::{PrivateContext, PrivateImmutable};\n    use dep::aztec::{\n        encrypted_logs::encrypted_note_emission::encode_and_encrypt_note_with_keys,\n        keys::getters::get_current_public_keys\n    };\n\n    use dep::authwit::{\n        entrypoint::{app::AppPayload, fee::FeePayload}, account::AccountActions,\n        auth_witness::get_auth_witness\n    };\n\n    use dep::ecdsa_public_key_note::EcdsaPublicKeyNote;\n\n    #[aztec(storage)]\n    struct Storage {\n        public_key: PrivateImmutable<EcdsaPublicKeyNote>,\n    }\n\n    // Creates a new account out of an ECDSA public key to use for signature verification\n    #[aztec(private)]\n    #[aztec(initializer)]\n    fn constructor(signing_pub_key_x: [u8; 32], signing_pub_key_y: [u8; 32]) {\n        let this = context.this_address();\n        let this_keys = get_current_public_keys(&mut context, this);\n        // Not emitting outgoing for msg_sender here to not have to register keys for the contract through which we\n        // deploy this (typically MultiCallEntrypoint). I think it's ok here as I feel the outgoing here is not that\n        // important.\n\n        let mut pub_key_note = EcdsaPublicKeyNote::new(signing_pub_key_x, signing_pub_key_y, this_keys.npk_m.hash());\n        storage.public_key.initialize(&mut pub_key_note).emit(encode_and_encrypt_note_with_keys(&mut context, this_keys.ovpk_m, this_keys.ivpk_m, this));\n    }\n\n    // Note: If you globally change the entrypoint signature don't forget to update account_entrypoint.ts\n    #[aztec(private)]\n    fn entrypoint(app_payload: AppPayload, fee_payload: FeePayload, cancellable: bool) {\n        let actions = AccountActions::init(&mut context, is_valid_impl);\n        actions.entrypoint(app_payload, fee_payload, cancellable);\n    }\n\n    #[aztec(private)]\n    #[aztec(noinitcheck)]\n    #[aztec(view)]\n    fn verify_private_authwit(inner_hash: Field) -> Field {\n        let actions = AccountActions::init(&mut context, is_valid_impl);\n        actions.verify_private_authwit(inner_hash)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, outer_hash: Field) -> bool {\n        // Load public key from storage\n        let storage = Storage::init(context);\n        let public_key = storage.public_key.get_note();\n\n        // Load auth witness\n        let witness: [Field; 64] = unsafe {\n            get_auth_witness(outer_hash)\n        };\n        let mut signature: [u8; 64] = [0; 64];\n        for i in 0..64 {\n            signature[i] = witness[i] as u8;\n        }\n\n        // Verify payload signature using Ethereum's signing scheme\n        // Note that noir expects the hash of the message/challenge as input to the ECDSA verification.\n        let outer_hash_bytes: [u8; 32] = outer_hash.to_be_bytes();\n        let hashed_message: [u8; 32] = std::hash::sha256(outer_hash_bytes);\n        std::ecdsa_secp256k1::verify_signature(public_key.x, public_key.y, signature, hashed_message)\n    }\n}","path":"/Users/yashbharti/Desktop/Engineering/core_projects/alpha-build-1/aztecWallet/src/noir_contracts/security_options/src/main.nr"},"69":{"source":"use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{\n    GENERATOR_INDEX__AUTHWIT_INNER, GENERATOR_INDEX__AUTHWIT_OUTER, GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    CANONICAL_AUTH_REGISTRY_ADDRESS\n},\n    hash::poseidon2_hash_with_separator\n};\nuse dep::aztec::{prelude::Deserialize, context::{PrivateContext, PublicContext, gas::GasOpts}, hash::hash_args_array};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `keccak256(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\nglobal IS_VALID_SELECTOR = 0xabf64ad4; // 4 first bytes of keccak256(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([context.msg_sender().to_field(), context.selector().to_field(), context.args_hash]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that have authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress, inner_hash: Field) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context.static_call_private_function(\n        on_behalf_of,\n        comptime {\n        FunctionSelector::from_signature(\"verify_private_authwit(Field)\")\n    },\n        [inner_hash]\n    ).unpack_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allow same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` have authorized the current call in the authentication registry\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash(\n        [(*context).msg_sender().to_field(), (*context).selector().to_field(), (*context).get_args_hash()]\n    );\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` have authorized a speicifc `inner_hash` in the authentication registry\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that have authorized the `inner_hash`\n */\npub fn assert_inner_hash_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress, inner_hash: Field) {\n    let result: Field = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime {\n        FunctionSelector::from_signature(\"consume((Field),Field)\")\n    },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default()\n    ).deserialize_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N]\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash = compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computs the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that have authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(consumer: AztecAddress, chain_id: Field, version: Field, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        consumer.to_field(),\n        chain_id,\n        version,\n        inner_hash\n    ],\n        GENERATOR_INDEX__AUTHWIT_OUTER\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub fn set_authorized(context: &mut PublicContext, message_hash: Field, authorize: bool) {\n    context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime {\n        FunctionSelector::from_signature(\"set_authorized(Field,bool)\")\n    },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default()\n    ).assert_empty();\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime {\n        FunctionSelector::from_signature(\"set_reject_all(bool)\")\n    },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default()\n    ).assert_empty();\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/authwit/src/auth.nr"},"70":{"source":"#[oracle(getAuthWitness)]\nunconstrained fn get_auth_witness_oracle<let N: u32>(_message_hash: Field) -> [Field; N] {}\n\n/**\n * Oracle wrapper to fetch an `auth_witness` for a given `message_hash` from the PXE.\n * \n * @param message_hash The hash of the message for which the `auth_witness` is to be fetched.\n * @return The `auth_witness` for the given `message_hash` as Field array.\n */\nunconstrained pub fn get_auth_witness<let N: u32>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/authwit/src/auth_witness.nr"},"71":{"source":"use dep::aztec::prelude::PrivateContext;\nuse dep::aztec::protocol_types::{\n    constants::GENERATOR_INDEX__FEE_PAYLOAD, hash::poseidon2_hash_with_separator,\n    traits::{Hash, Serialize}\n};\nuse crate::entrypoint::function_call::FunctionCall;\n\n// 2 * 5 (FUNCTION_CALL_SIZE) + 2\nglobal FEE_PAYLOAD_SIZE: Field = 12;\n\n// 2 * 98 (FUNCTION_CALL_SIZE_IN_BYTES) + 32\nglobal FEE_PAYLOAD_SIZE_IN_BYTES: Field = 228;\n\nglobal MAX_FEE_FUNCTION_CALLS = 2;\n\n// docs:start:fee-payload-struct\nstruct FeePayload {\n  function_calls: [FunctionCall; MAX_FEE_FUNCTION_CALLS],\n  nonce: Field,\n  is_fee_payer: bool,\n}\n// docs:end:fee-payload-struct\n\nimpl Serialize<FEE_PAYLOAD_SIZE> for FeePayload {\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; FEE_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, FEE_PAYLOAD_SIZE> = BoundedVec::new();\n    for i in 0..MAX_FEE_FUNCTION_CALLS {\n      fields.extend_from_array(self.function_calls[i].serialize());\n    }\n    fields.push(self.nonce);\n    fields.push(self.is_fee_payer as Field);\n    fields.storage\n  }\n}\n\nimpl Hash for FeePayload {\n  fn hash(self) -> Field {\n    poseidon2_hash_with_separator(\n      self.serialize(),\n      GENERATOR_INDEX__FEE_PAYLOAD\n    )\n  }\n}\n\nimpl FeePayload {\n    fn to_be_bytes(self) -> [u8; FEE_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, FEE_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..MAX_FEE_FUNCTION_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_array(self.nonce.to_be_bytes::<32>());\n        bytes.push(self.is_fee_payer as u8);\n\n        bytes.storage\n    }\n\n    fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                } else {\n                    let _result = context.call_private_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                }\n            }\n        }\n        if self.is_fee_payer {\n            context.set_as_fee_payer();\n        }\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/authwit/src/entrypoint/fee.nr"},"72":{"source":"use dep::aztec::prelude::PrivateContext;\nuse dep::aztec::protocol_types::{\n    constants::GENERATOR_INDEX__SIGNATURE_PAYLOAD, hash::poseidon2_hash_with_separator,\n    traits::{Hash, Serialize}\n};\n\nuse crate::entrypoint::function_call::{FunctionCall, FUNCTION_CALL_SIZE_IN_BYTES};\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal APP_PAYLOAD_SIZE: u64 = 21;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal APP_PAYLOAD_SIZE_IN_BYTES: u64 = 424;\n\nglobal ACCOUNT_MAX_CALLS: u64 = 4;\n\n// Note: If you change the following struct you have to update default_entrypoint.ts\n// docs:start:app-payload-struct\nstruct AppPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:app-payload-struct\n\nimpl Serialize<APP_PAYLOAD_SIZE> for AppPayload {\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; APP_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, APP_PAYLOAD_SIZE> = BoundedVec::new();\n    for call in self.function_calls {\n      fields.extend_from_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n}\n\nimpl Hash for AppPayload {\n  fn hash(self) -> Field {\n    poseidon2_hash_with_separator(\n      self.serialize(),\n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n  }\n}\n\nimpl AppPayload {\n    // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n    fn to_be_bytes(self) -> [u8; APP_PAYLOAD_SIZE_IN_BYTES] {\n        let mut bytes: BoundedVec<u8, APP_PAYLOAD_SIZE_IN_BYTES> = BoundedVec::new();\n\n        for i in 0..ACCOUNT_MAX_CALLS {\n            bytes.extend_from_array(self.function_calls[i].to_be_bytes());\n        }\n        bytes.extend_from_array(self.nonce.to_be_bytes::<32>());\n\n        bytes.storage\n    }\n\n    // Executes all private and public calls\n    // docs:start:entrypoint-execute-calls\n    fn execute_calls(self, context: &mut PrivateContext) {\n        for call in self.function_calls {\n            if !call.target_address.is_zero() {\n                if call.is_public {\n                    context.call_public_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                } else {\n                    let _result = context.call_private_function_with_packed_args(\n                        call.target_address,\n                        call.function_selector,\n                        call.args_hash,\n                        call.is_static,\n                        false\n                    );\n                }\n            }\n        }\n    }\n    // docs:end:entrypoint-execute-calls\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/authwit/src/entrypoint/app.nr"},"75":{"source":"use dep::aztec::{\n    context::PrivateContext,\n    protocol_types::constants::{GENERATOR_INDEX__COMBINED_PAYLOAD, GENERATOR_INDEX__TX_NULLIFIER},\n    hash::poseidon2_hash_with_separator\n};\n\nuse crate::entrypoint::{app::AppPayload, fee::FeePayload};\nuse crate::auth::{IS_VALID_SELECTOR, compute_authwit_message_hash};\n\nstruct AccountActions<Context> {\n  context: Context,\n  is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\n}\n\nimpl<Context> AccountActions<Context> {\n    pub fn init(context: Context, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n        AccountActions { context, is_valid_impl }\n    }\n}\n\n/**\n * An implementation of the Account Action struct for the private context.\n *\n * Implements logic to verify authorization and execute payloads.\n */\nimpl AccountActions<&mut PrivateContext> {\n\n    /**\n     * Verifies that the `app_hash` and `fee_hash` are authorized and then executes them.\n     *\n     * Executes the `fee_payload` and `app_payload` in sequence.\n     * Will execute the `fee_payload` as part of the setup, and then enter the app phase.\n     *\n     * @param app_payload The payload that contains the calls to be executed in the app phase.\n     * @param fee_payload The payload that contains the calls to be executed in the setup phase.\n     */\n    // docs:start:entrypoint\n    pub fn entrypoint(self, app_payload: AppPayload, fee_payload: FeePayload, cancellable: bool) {\n        let valid_fn = self.is_valid_impl;\n\n        let combined_payload_hash = poseidon2_hash_with_separator(\n            [app_payload.hash(), fee_payload.hash()],\n            GENERATOR_INDEX__COMBINED_PAYLOAD\n        );\n        assert(valid_fn(self.context, combined_payload_hash));\n\n        fee_payload.execute_calls(self.context);\n        self.context.end_setup();\n        app_payload.execute_calls(self.context);\n        if cancellable {\n            let tx_nullifier = poseidon2_hash_with_separator([app_payload.nonce], GENERATOR_INDEX__TX_NULLIFIER);\n            self.context.push_nullifier(tx_nullifier);\n        }\n    }\n    // docs:end:entrypoint\n\n    /**\n     * Verifies that the `msg_sender` is authorized to consume `inner_hash` by the account.\n     *\n     * Computes the `message_hash` using the `msg_sender`, `chain_id`, `version` and `inner_hash`.\n     * Then executes the `is_valid_impl` function to verify that the message is authorized.\n     *\n     * Will revert if the message is not authorized.\n     *\n     * @param inner_hash The hash of the message that the `msg_sender` is trying to consume.\n     */\n    // docs:start:verify_private_authwit\n    pub fn verify_private_authwit(self, inner_hash: Field) -> Field {\n        // The `inner_hash` is \"siloed\" with the `msg_sender` to ensure that only it can\n        // consume the message.\n        // This ensures that contracts cannot consume messages that are not intended for them.\n        let message_hash = compute_authwit_message_hash(\n            self.context.msg_sender(),\n            self.context.chain_id(),\n            self.context.version(),\n            inner_hash\n        );\n        let valid_fn = self.is_valid_impl;\n        assert(valid_fn(self.context, message_hash) == true, \"Message not authorized by account\");\n        IS_VALID_SELECTOR\n    }\n    // docs:end:verify_private_authwit\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/authwit/src/account.nr"},"80":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N, M>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n\n    let serialized_note = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    )\n        == 0\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, N, M>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, N, M>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, N, M>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N, M> {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    assert(notify_nullified_note(nullifier, notification_note_hash, nullifier_counter) == 0);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"81":{"source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32, let M: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32, let M: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in \n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in \n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the \n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the \n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from \n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let M: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N, M> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"83":{"source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, MAX_NOTES_PER_PAGE, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32, let M: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N, M> {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N, M> + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N, M> + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32, let M: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N, M> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N, M> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32, let M: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N, M>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N, M> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr"},"86":{"source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\nstruct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting  \n * a change note in a token's transfer function only when there is \"change\" left).\n */\nstruct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr"},"95":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{\n    execution::{get_chain_id, get_version, get_contract_address, get_block_number},\n    storage::{raw_storage_read, storage_read}\n};\n\nstruct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr"},"97":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, gas::Gas,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, public_call_stack_item::PublicCallStackItem,\n    public_call_stack_item_compressed::PublicCallStackItemCompressed, read_request::ReadRequest,\n    note_hash::NoteHash, nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = PublicCallStackItemCompressed {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty()\n        };\n\n        let call_request = PublicCallRequest { item, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = PublicCallStackItemCompressed {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty()\n        };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            item,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"102":{"source":"use crate::note::note_interface::NoteInterface;\nuse crate::event::event_interface::EventInterface;\nuse dep::protocol_types::{scalar::Scalar, point::Point};\n\nuse std::aes128::aes128_encrypt;\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::IvpkM};\n\nstruct EncryptedLogIncomingBody<let M: u32> {\n    plaintext: [u8; M]\n}\n\nimpl<let M: u32> EncryptedLogIncomingBody<M> {\n    pub fn from_note<T, let N: u32>(note: T, storage_slot: Field) -> Self where T: NoteInterface<N, M> {\n        let mut plaintext = note.to_be_bytes(storage_slot);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn from_event<T, let MR: u32>(\n        event: T,\n        randomness: Field\n    ) -> Self where T: EventInterface<M, MR> {\n        let mut plaintext = event.private_to_be_bytes(randomness);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn compute_ciphertext(self, eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n        let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(self.plaintext, iv, sym_key)\n    }\n}\n\nmod test {\n    use dep::protocol_types::{\n        address::AztecAddress, scalar::Scalar, point::Point, traits::Serialize,\n        abis::event_selector::EventSelector\n    };\n\n    use crate::{\n        note::{note_header::NoteHeader, note_interface::NoteInterface},\n        encrypted_logs::incoming_body::EncryptedLogIncomingBody, event::event_interface::EventInterface,\n        context::PrivateContext, keys::public_keys::IvpkM\n    };\n\n    struct AddressNote {\n        address: AztecAddress,\n        owner: AztecAddress,\n        randomness: Field,\n        header: NoteHeader,\n    }\n\n    global ADDRESS_NOTE_LEN: Field = 3;\n    global ADDRESS_NOTE_BYTES_LEN = 32 * 3 + 64;\n\n    impl NoteInterface<ADDRESS_NOTE_LEN, ADDRESS_NOTE_BYTES_LEN> for AddressNote {\n        fn compute_note_hiding_point(_self: Self) -> Point {\n            crate::generators::Ga1\n        }\n\n        fn get_note_type_id() -> Field {\n            1\n        }\n\n        fn get_header(self) -> NoteHeader { self.header}\n\n        fn set_header(&mut self, header: NoteHeader) {self.header = header; }\n\n        fn compute_nullifier(_self: Self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n            1\n        }\n\n        fn compute_nullifier_without_context(_self: Self) -> Field {\n            1\n        }\n\n        fn serialize_content(self) -> [Field; ADDRESS_NOTE_LEN] { [self.address.to_field(), self.owner.to_field(), self.randomness]}\n\n        fn deserialize_content(fields: [Field; ADDRESS_NOTE_LEN]) -> Self {\n            AddressNote { address: AztecAddress::from_field(fields[0]), owner: AztecAddress::from_field(fields[1]), randomness: fields[2], header: NoteHeader::empty() }\n        }\n\n        fn to_be_bytes(self, storage_slot: Field) -> [u8; ADDRESS_NOTE_BYTES_LEN] {\n            let serialized_note = self.serialize_content();\n\n            let mut buffer: [u8; ADDRESS_NOTE_BYTES_LEN] = [0; ADDRESS_NOTE_BYTES_LEN];\n\n            let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n            let note_type_id_bytes: [u8; 32] = AddressNote::get_note_type_id().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = storage_slot_bytes[i];\n                buffer[32 + i] = note_type_id_bytes[i];\n            }\n\n            for i in 0..serialized_note.len() {\n                let bytes: [u8; 32] = serialized_note[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n            buffer\n        }\n    }\n\n    impl AddressNote {\n        pub fn new(address: AztecAddress, owner: AztecAddress, randomness: Field) -> Self {\n            AddressNote { address, owner, randomness, header: NoteHeader::empty() }\n        }\n    }\n\n    #[test]\n    fn test_encrypted_note_log_incoming_body_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let note = AddressNote::new(\n            AztecAddress::from_field(0x1),\n            AztecAddress::from_field(0x2),\n            3\n        );\n\n        let storage_slot = 2;\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        /// 1. `EncryptedLogIncomingBody::from_note` calls `note.to_be_bytes(storage_slot)` function which serializes\n        /// the note to bytes - note that in the case of `AddressNote` the `to_be_bytes` function was automatically\n        /// implemented by Aztec macros.\n        let body = EncryptedLogIncomingBody::from_note(note, storage_slot);\n\n        /// 2. `body.compute_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    struct TestEvent {\n        value0: Field,\n        value1: Field,\n        value2: Field,\n    }\n\n    impl Serialize<3> for TestEvent {\n        fn serialize(self) -> [Field; 3] {\n            [self.value0, self.value1, self.value2]\n        }\n    }\n\n    global TEST_EVENT_LEN: Field = 3;\n    global TEST_EVENT_BYTES_LEN = 32 * 3 + 64;\n    global TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS = 32 * 3 + 32;\n\n    impl EventInterface<TEST_EVENT_BYTES_LEN, TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS> for TestEvent {\n        fn get_event_type_id() -> EventSelector {\n            comptime { EventSelector::from_signature(\"TestEvent(Field,Field,Field)\") }\n        }\n\n        fn private_to_be_bytes(self, randomness: Field) -> [u8; TEST_EVENT_BYTES_LEN] {\n            let mut buffer: [u8; TEST_EVENT_BYTES_LEN] = [0; TEST_EVENT_BYTES_LEN];\n\n            let randomness_bytes: [u8; 32] = randomness.to_be_bytes();\n            let event_type_id_bytes: [u8; 32] = TestEvent::get_event_type_id().to_field().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = randomness_bytes[i];\n                buffer[32 + i] = event_type_id_bytes[i];\n            }\n\n            let serialized_event = self.serialize();\n\n            for i in 0..serialized_event.len() {\n                let bytes: [u8; 32] = serialized_event[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n\n            buffer\n        }\n\n        fn to_be_bytes(self) -> [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] {\n             let mut buffer: [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] = [0; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS];\n\n             let event_type_id_bytes: [u8; 32] = TestEvent::get_event_type_id().to_field().to_be_bytes();\n\n             for i in 0..32 {\n                 buffer[i] = event_type_id_bytes[i];\n            }\n\n             let serialized_event = self.serialize();\n\n             for i in 0..serialized_event.len() {\n                 let bytes: [u8; 32] = serialized_event[i].to_be_bytes();\n                 for j in 0..32 {\n                     buffer[32 + i * 32 + j] = bytes[j];\n                }\n            }\n\n             buffer\n        }\n\n        fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n            _emit(self);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_event_incoming_body() {\n        let test_event = TestEvent { value0: 1, value1: 2, value2: 3 };\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        let randomness = 2;\n\n        let body = EncryptedLogIncomingBody::from_event(test_event, randomness);\n\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_event_log_incoming_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let event_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 185, 29, 14, 152, 216, 130, 219, 151, 80, 185, 43, 223, 167, 8, 89, 189, 88, 188, 101, 137, 255, 136, 84, 252, 79, 18, 52, 3, 110, 54, 54, 206, 244, 209, 246, 226, 207, 247, 143, 253, 211, 75, 160, 224, 172, 41, 45, 7, 208, 137, 90, 56, 59, 4, 234, 48, 53, 23, 130, 230, 49, 249, 142, 243, 170, 72, 183, 242, 49, 124, 46, 52, 198, 75, 55, 102, 56, 89, 254, 67, 59, 157, 249, 120, 184, 67, 154, 16, 148, 227, 93, 37, 120, 199, 93, 166, 80, 127, 173, 52, 80, 135, 87, 1, 168, 164, 51, 48, 126, 120, 47, 102, 211, 227, 234, 170, 208, 99, 111, 198, 170, 226, 156, 244, 241, 174, 206, 30\n        ];\n\n        assert_eq(event_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..event_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], event_body_ciphertext_from_typescript[i]);\n        }\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/incoming_body.nr"},"103":{"source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\nstruct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nfn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr"},"104":{"source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::get_current_public_keys, public_keys::{OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_note_log, oracle::logs_traits::LensForEncryptedLog\n};\nuse dep::protocol_types::{\n    hash::sha256_to_field, address::AztecAddress, point::Point, abis::note_hash::NoteHash,\n    constants::MAX_NOTE_HASHES_PER_CALL\n};\n\nunconstrained fn compute_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note\n) -> ([u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    compute(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note\n    )\n}\n\nfn compute<Note, let N: u32, let NB: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note\n) -> ([u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let encrypted_log: [u8; M] = compute_encrypted_note_log(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n    (encrypted_log, log_hash)\n}\n\nfn emit_with_keys<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    inner_compute: fn(AztecAddress, Field, Field, OvpkM, IvpkM, AztecAddress, Note) -> ([u8; M], Field)\n) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n    let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n    let (encrypted_log, log_hash) = inner_compute(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note\n    );\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n\npub fn encode_and_encrypt_note<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovpk = get_current_public_keys(context, ov).ovpk_m;\n        let ivpk = get_current_public_keys(context, iv).ivpk_m;\n        emit_with_keys(context, e.note, ovpk, ivpk, iv, compute);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovpk = get_current_public_keys(context, ov).ovpk_m;\n        let ivpk = get_current_public_keys(context, iv).ivpk_m;\n        emit_with_keys(context, e.note, ovpk, ivpk, iv, compute_unconstrained);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        emit_with_keys(context, e.note, ovpk, ivpk, recipient, compute);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        emit_with_keys(context, e.note, ovpk, ivpk, recipient, compute_unconstrained);\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr"},"105":{"source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::aes128::aes128_encrypt;\n\nuse crate::{keys::public_keys::IvpkM, utils::point::point_to_bytes};\n\nstruct EncryptedLogOutgoingBody {\n    eph_sk: Scalar,\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n}\n\nimpl EncryptedLogOutgoingBody {\n    pub fn new(eph_sk: Scalar, recipient: AztecAddress, recipient_ivpk: IvpkM) -> Self {\n        Self { eph_sk, recipient, recipient_ivpk }\n    }\n\n    /// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n    /// be able to derive the key with which the incoming log can be decrypted.\n    pub fn compute_ciphertext(self, ovsk_app: Scalar, eph_pk: Point) -> [u8; 144] {\n        // Again, we could compute `eph_pk` here, but we keep the interface more similar\n        // and also make it easier to optimise it later as we just pass it along\n\n        let mut buffer = [0 as u8; 128];\n\n        let serialized_eph_sk_high: [u8; 32] = self.eph_sk.hi.to_be_bytes();\n        let serialized_eph_sk_low: [u8; 32] = self.eph_sk.lo.to_be_bytes();\n\n        let address_bytes: [u8; 32] = self.recipient.to_field().to_be_bytes();\n        let serialized_recipient_ivpk = point_to_bytes(self.recipient_ivpk.to_point());\n\n        for i in 0..32 {\n            buffer[i] = serialized_eph_sk_high[i];\n            buffer[i + 32] = serialized_eph_sk_low[i];\n            buffer[i + 64] = address_bytes[i];\n        }\n        for i in 0..32 {\n            buffer[i + 96] = serialized_recipient_ivpk[i];\n        }\n\n        // We compute the symmetric key using poseidon.\n        let full_key: [u8; 32] = poseidon2_hash_with_separator(\n            [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n            GENERATOR_INDEX__SYMMETRIC_KEY as Field\n        ).to_be_bytes();\n\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(buffer, iv, sym_key).as_array()\n    }\n}\n\nmod test {\n    use crate::{encrypted_logs::outgoing_body::EncryptedLogOutgoingBody, keys::public_keys::IvpkM};\n    use dep::protocol_types::{\n        address::AztecAddress, traits::Empty, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        scalar::Scalar, point::Point, hash::poseidon2_hash_with_separator\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n\n    use crate::context::PrivateContext;\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let body = EncryptedLogOutgoingBody::new(eph_sk, recipient, recipient_ivpk);\n\n        let ciphertext = body.compute_ciphertext(sender_ovsk_app, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/outgoing_body.nr"},"107":{"source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\nuse std::{\n    embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    event::event_interface::EventInterface, oracle::unsafe_rand::unsafe_rand,\n    utils::point::point_to_bytes, note::note_interface::NoteInterface,\n    encrypted_logs::{\n    header::EncryptedLogHeader, incoming_body::EncryptedLogIncomingBody,\n    outgoing_body::EncryptedLogOutgoingBody\n},\n    keys::public_keys::{OvpkM, IvpkM}\n};\n\npub fn compute_encrypted_event_log<Event, let NB: u32, let MB: u32, let OB: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    event: Event\n) -> [u8; OB] where Event: EventInterface<NB, MB> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_event(event, randomness).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; OB] = [0; OB];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = OB - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\npub fn compute_encrypted_note_log<Note, let N: u32, let NB: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note\n) -> [u8; M] where Note: NoteInterface<N, NB> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_note(note, storage_slot).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(unsafe_rand());\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::compute_encrypted_note_log, keys::public_keys::{OvpkM, IvpkM},\n        test::mocks::mock_note::MockNoteBuilder\n    };\n    use dep::protocol_types::{address::AztecAddress, point::Point};\n    use std::test::OracleMock;\n\n    #[test]\n    fn test_encrypted_note_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let storage_slot = 0x0fe46be583b71f4ab5b70c2657ff1d05cccf1d292a9369628d1a194f944e6599;\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let note_value = 0x301640ceea758391b2e161c92c0513f129020f4125256afdae2646ce31099f5c;\n        let note = MockNoteBuilder::new(note_value).contract_address(contract_address).storage_slot(storage_slot).build();\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_note_log(\n            contract_address,\n            storage_slot,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            note\n        );\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_note_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 205, 103, 212, 60, 151, 141, 10, 151, 222, 151, 180, 43, 91, 148, 201, 110, 165, 10, 238, 32, 134, 235, 99, 216, 200, 182, 31, 22, 156, 18, 209, 222, 172, 239, 193, 212, 86, 99, 62, 70, 182, 45, 175, 241, 91, 202, 179, 225, 236, 95, 71, 66, 151, 225, 203, 53, 216, 85, 102, 130, 6, 8, 25, 180, 86, 58, 140, 198, 105, 102, 177, 42, 94, 115, 247, 145, 147, 24, 231, 39, 73, 27, 10, 219, 130, 115, 188, 74, 114, 5, 177, 199, 83, 183, 106, 87, 204, 238, 231, 72, 45, 240, 39, 174, 25, 98, 53, 187, 156, 159, 244, 38\n        ];\n        for i in 0..encrypted_note_log_from_typescript.len() {\n            assert_eq(log[i], encrypted_note_log_from_typescript[i]);\n        }\n        assert_eq(encrypted_note_log_from_typescript.len(), log.len());\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr"},"121":{"source":"#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n\n// Called `unsafe_rand` because we do not constrain in circuit that we are dealing with an actual random value.\n// Instead we just trust our PXE.\nunconstrained pub fn unsafe_rand() -> Field {\n    rand_oracle()\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/unsafe_rand.nr"},"122":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"124":{"source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"125":{"source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"126":{"source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter)\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\nunconstrained pub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) -> Field {\n    notify_nullified_note_oracle(nullifier, note_hash, counter)\n}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let NB: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N, NB> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"127":{"source":"#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr"},"128":{"source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"129":{"source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"132":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(address: Field, storage_slot: Field, block_number: Field, length: Field) -> [Field; N] {}\n\nunconstrained pub fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field\n    )\n}\n\nunconstrained pub fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> T where T: Deserialize<N> {\n    T::deserialize(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::address::AztecAddress;\n\n    use std::test::OracleMock;\n    use crate::test::mocks::mock_struct::MockStruct;\n\n    global address = AztecAddress::from_field(29);\n    global slot = 7;\n    global block_number = 17;\n\n    #[test]\n    fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"133":{"source":"use dep::protocol_types::{address::AztecAddress, point::Point};\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(_note_hash_counter: u32, _encrypted_note: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_note_log<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(_contract_address: AztecAddress, _randomness: Field, _encrypted_event: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_event_log<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedNoteLog)]\nunconstrained fn compute_encrypted_note_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_note_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_note_log_oracle(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedEventLog)]\nunconstrained fn compute_encrypted_event_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _event_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_event_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    event_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_event_log_oracle(\n        contract_address,\n        randomness,\n        event_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_oracle_private<T>(_contract_address: AztecAddress, _message: T, _counter: u32) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log_private_internal<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32\n) -> Field {\n    emit_unencrypted_log_oracle_private(contract_address, message, counter)\n}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n\nunconstrained pub fn emit_contract_class_unencrypted_log_private_internal<let N: u32>(contract_address: AztecAddress, message: [Field; N], counter: u32) -> Field {\n    emit_contract_class_unencrypted_log_private(contract_address, message, counter)\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"136":{"source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage,\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, public_data_tree_index: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"137":{"source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"144":{"source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"149":{"source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr"},"154":{"source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/initializer.nr"},"155":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH, MAX_ARGS_LENGTH\n},\n    traits::Hash,\n    hash::{\n    pedersen_hash, compute_siloed_nullifier, sha256_to_field, pedersen_commitment,\n    poseidon2_hash_with_separator\n}\n};\n// Note: pedersen_commitment is used only as a re-export here\nuse crate::oracle::logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog};\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (n as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() <= MAX_ARGS_LENGTH, \"Args length exceeds maximum\");\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = poseidon2_hash_with_separator(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = poseidon2_hash_with_separator(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        poseidon2_hash_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..MAX_ARGS_LENGTH {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x1cce4dbf69f14c44865919991ee1057922e34d7310ba237d71759aa422621ca9);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"157":{"source":"use crate::keys::public_keys::{PublicKeys, PUBLIC_KEYS_LENGTH};\nuse dep::protocol_types::traits::{Serialize, Deserialize};\n\n// This struct represents how public keys are stored in the key registry. We store not just the keys themselves but also\n// their hash, so that when reading in private we can perform a historical read for the hash and then show that it\n// corresponds to a preimage obtained from an unconstrained hint. We do store the keys keys regardless as they might be\n// needed during public execution, and since we need to broadcast and produce hints in some standardized way.\n// While it might seem odd to create a struct for what is effectively some data and a pure function called on it, state\n// variables rely on serializable structs in order to persist data to storage, so we must use this abstraction.\nstruct StoredKeys {\n    public_keys: PublicKeys,\n    hash: Field,\n}\n\nimpl StoredKeys {\n    // Instances of StoredKeys are expected to only be created by calling this function so that we guarantee that the\n    // hash field does indeed correspond to the hash of the keys. Ideally we'd forbid direct access to the struct, but \n    // Noir doesn't yet support private members.\n    fn new(public_keys: PublicKeys) -> Self {\n        Self { public_keys, hash: public_keys.hash().inner }\n    }\n}\n\n// Our serialization is the concatenation of the public keys serialization plush the hash, so we need one extra field.\nglobal STORED_KEYS_LENGTH: u32 =  PUBLIC_KEYS_LENGTH + 1;\n\nimpl Serialize<STORED_KEYS_LENGTH> for StoredKeys {\n    fn serialize(self) -> [Field; STORED_KEYS_LENGTH] {\n        // The code below is equivalent to:\n        // [ ...self.public_keys.serialize(), self.hash ]\n\n        let mut array = [0; STORED_KEYS_LENGTH];\n\n        let serialized_keys = self.public_keys.serialize();\n        for i in 0..serialized_keys.len() {\n            array[i] = serialized_keys[i];\n        }\n\n        array[PUBLIC_KEYS_LENGTH] = self.hash;\n\n        array\n    }\n}\n\nimpl Deserialize<STORED_KEYS_LENGTH> for StoredKeys {\n    fn deserialize(array: [Field; STORED_KEYS_LENGTH]) -> Self {\n        // The code below is equivalent to:\n        // Self { public_keys: PublicKeys::deserialize(array[0 : PUBLIC_KEYS_LENGTH]), hash: array[PUBLIC_KEYS_LENGTH] }\n\n        let mut serialized_keys = [0; PUBLIC_KEYS_LENGTH];\n        for i in 0..serialized_keys.len() {\n            serialized_keys[i] = array[i];\n        }\n\n        let hash = array[PUBLIC_KEYS_LENGTH];\n\n        Self { public_keys: PublicKeys::deserialize(serialized_keys), hash }\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/keys/stored_keys.nr"},"159":{"source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nfn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr"},"161":{"source":"use dep::protocol_types::{\n    header::Header, abis::validation_requests::KeyValidationRequest, address::AztecAddress,\n    constants::CANONICAL_KEY_REGISTRY_ADDRESS, point::Point, storage::map::derive_storage_slot_in_map,\n    traits::is_empty\n};\nuse crate::{\n    context::{PrivateContext, UnconstrainedContext},\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{\n    public_keys::{PublicKeys, PUBLIC_KEYS_LENGTH}, stored_keys::StoredKeys,\n    constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX, TAGGING_INDEX}\n},\n    state_vars::{\n    shared_mutable::shared_mutable_private_getter::SharedMutablePrivateGetter,\n    public_mutable::PublicMutable, map::Map\n}\n};\n\nmod test;\n\n// This is the number of blocks that must pass after a key rotation event until the old keys are fully phased out and\n// become invalid.\nglobal KEY_REGISTRY_UPDATE_BLOCKS = 5;\n\nglobal KEY_REGISTRY_STORAGE_SLOT = 1;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// Returns all current public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_current_public_keys(context: &mut PrivateContext, account: AztecAddress) -> PublicKeys {\n    // We're going to perform historical reads from public storage, and so need to constrain the caller so that they\n    // cannot use very old blocks when constructing proofs, and hence e.g. read very old keys. We are lax and allow\n    // _any_ recent block number to be used, regardless of whether there may have been a recent key rotation. This means\n    // that multiple sets of keys are valid for a while immediately after rotation, until the old keys become phased\n    // out. We *must* be lax to prevent denial of service and transaction fingerprinting attacks by accounts that rotate\n    // their keys frequently.\n    // Note that we constrain the max block number even if the registry ends up being empty: this ensures that proof of\n    // an empty registry is also fresh.\n    let current_header = context.get_header();\n    context.set_tx_max_block_number(current_header.global_variables.block_number as u32 + KEY_REGISTRY_UPDATE_BLOCKS);\n\n    get_historical_public_keys(current_header, account)\n}\n\n// Returns historical public keys for a given account at some block determined by a block header. We read all keys at\n// once since the constraints for reading them all are actually fewer than if we read them one at a time - any read keys\n// that are not required by the caller can simply be discarded.\n// WARNING: if called with a historical header created from a fixed block this function will explicitly ignore key\n// rotation! This means that callers of this may force a user to use old keys, potentially leaking privacy (e.g. if the\n// old keys were leaked). Only call this function with a header from a fixed block if you understand the implications of\n// breaking key rotation very well.\npub fn get_historical_public_keys(historical_header: Header, account: AztecAddress) -> PublicKeys {\n    // TODO: improve this so that we always hint the correct set of keys (either registry or canonical) and hash them\n    // once instead of having two different hints and twice as many constraints due to the double hashing.\n\n    // The key registry is the primary source of information for keys, as that's where accounts store their new keys\n    // when they perform rotation. The key registry conveniently stores a hash of each user's keys, so we can read that\n    // single field and then prove that we know its preimage (i.e. the current set of keys).\n    let key_registry_hash = key_registry_hash_public_historical_read(historical_header, account);\n    if key_registry_hash != 0 {\n        let hinted_registry_public_keys = key_registry_get_stored_keys_hint(\n            account,\n            historical_header.global_variables.block_number as u32\n        );\n        assert_eq(hinted_registry_public_keys.hash().to_field(), key_registry_hash);\n\n        hinted_registry_public_keys\n    } else {\n        // If nothing was written to the registry, we may still be able to produce the correct keys if we happen to know\n        // the canonical set (i.e. the ones that are part of the account's preimage).\n        let (hinted_canonical_public_keys, partial_address) = get_public_keys_and_partial_address(account);\n        assert_eq(\n            account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n        );\n\n        hinted_canonical_public_keys\n    }\n}\n\nfn key_registry_hash_public_historical_read(historical_header: Header, account: AztecAddress) -> Field {\n    // The keys are stored in a Map that is keyed with the address of each account, so we first derive the corresponding\n    // slot for this account.\n    let keys_storage_slot = derive_storage_slot_in_map(KEY_REGISTRY_STORAGE_SLOT, account);\n\n    // The keys are stored as [ ...serialized_keys, hash ], and since arrays get allocated sequential storage slots\n    // (prior to siloing!), we simply add the length to the base slot to get the last element.\n    let hash_storage_slot = keys_storage_slot + PUBLIC_KEYS_LENGTH as Field;\n\n    historical_header.public_storage_historical_read(hash_storage_slot, CANONICAL_KEY_REGISTRY_ADDRESS)\n}\n\nunconstrained fn key_registry_get_stored_keys_hint(account: AztecAddress, block_number: u32) -> PublicKeys {\n    // This is equivalent to the key registry contract having an unconstrained getter that we call from an oracle, but\n    // PXE does not yet support that functionality so we do this manually instad. Note that this would be a *historical*\n    // call!\n\n    // TODO (#7524): call the unconstrained KeyRegistry.get_current_keys() function instead\n\n    let context = UnconstrainedContext::at_historical(CANONICAL_KEY_REGISTRY_ADDRESS, block_number);\n    let keys_storage = Map::new(\n        context,\n        KEY_REGISTRY_STORAGE_SLOT,\n        |context, slot| { PublicMutable::new(context, slot) }\n    );\n\n    let stored_keys: StoredKeys = keys_storage.at(account).read();\n    stored_keys.public_keys\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"162":{"source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\nuse crate::keys::constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\nstruct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\ntrait ToPoint {\n    fn to_point(self) -> Point;\n}\n\nstruct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nstruct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nstruct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nstruct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m : NpkM { inner: Point::empty() },\n            ivpk_m : IvpkM { inner: Point::empty() },\n            ovpk_m : OvpkM { inner: Point::empty() },\n            tpk_m : TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        ( self.npk_m.inner == other.npk_m.inner ) &\n        ( self.ivpk_m.inner == other.ivpk_m.inner ) &\n        ( self.ovpk_m.inner == other.ovpk_m.inner ) &\n        ( self.tpk_m.inner == other.tpk_m.inner )\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x:serialized[0], y:serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x:serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x:serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x:serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nfn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nfn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr"},"170":{"source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"178":{"source":"use dep::protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n    hash::poseidon2_hash_with_separator\n};\n\nuse crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    lifecycle::create_note, note_getter::{get_note, view_notes}, note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions, note_emission::NoteEmission\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateImmutable<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateImmutable<T, Context> {}\n\nimpl<Note, Context> PrivateImmutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateImmutable>` type (for example), because the storage slot often also identifies an actor. \n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n}\n\nimpl<Note> PrivateImmutable<Note, &mut PrivateContext> {\n    // docs:start:initialize\n    pub fn initialize<N, M>(\n        self,\n        note: &mut Note\n    ) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<N, M>(self) -> Note where Note: NoteInterface<N, M> {\n        let storage_slot = self.storage_slot;\n        get_note(self.context, storage_slot).0\n    }\n    // docs:end:get_note\n}\n\nimpl<Note> PrivateImmutable<Note, UnconstrainedContext> {\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // view_note does not actually use the context, but it calls oracles that are only available in private\n    // docs:start:view_note\n    unconstrained pub fn view_note<N, M>(self) -> Note  where Note: NoteInterface<N, M> {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/state_vars/private_immutable.nr"},"179":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::oracle::storage::storage_read;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, UnconstrainedContext> where T: Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"218":{"source":"use crate::{constants::KEY_VALIDATION_REQUEST_LENGTH, traits::{Empty, Serialize, Deserialize}, point::Point};\n\nstruct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m))\n            & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest {\n            pk_m: Point::empty(),\n            sk_app: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app,\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x:fields[0], y: fields[1], is_infinite: fields[2] as bool},\n            sk_app: fields[3],\n        }\n    }\n}\n\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr"},"262":{"source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        assert(false, \"depth should be between 0 and 10\");\n        0\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr"},"273":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"294":{"source":"struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"296":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr"},"297":{"source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr"},"298":{"source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x2499880e2b1b831785c17286f99a0d5122fee784ce7b1c04e380c4a991da819a;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"300":{"source":"use crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"304":{"source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"305":{"source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId, hash::poseidon2_hash_with_separator,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"307":{"source":"use crate::{\n    address::{eth_address::EthAddress, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"308":{"source":"use crate::{\n    address::{\n    eth_address::EthAddress, salted_initialization_hash::SaltedInitializationHash,\n    aztec_address::AztecAddress\n},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, FromField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH = 1;\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n       PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"312":{"source":"// Utility function to console.log data in the acir simulator\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n\n/// NOTE: call this with a str<N> msg of form\n/// \"some string with {0} and {1} ... {N}\"\n/// and an array of N field which will be formatted\n/// into the string in the simulator.\n/// Example:\n/// debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n/// debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\nunconstrained pub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n/// NOTE: call this with a str<N> msg of length > 1\n/// Example:\n/// `debug_log(\"blah blah this is a debug string\");`\nunconstrained pub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"313":{"source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc, point::Point\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"314":{"source":"use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: Field = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point {\n            x: 0,\n            y: 0,\n            is_infinite: false\n        }\n    }\n}\n","path":"/Users/yashbharti/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.53.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"325":{"source":"use dep::aztec::prelude::{AztecAddress, FunctionSelector, NoteHeader, NoteInterface, NoteGetterOptions, PrivateContext};\n\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, keys::getters::get_nsk_app,\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator}\n};\n\nglobal ECDSA_PUBLIC_KEY_NOTE_LEN: Field = 5;\n// ECDSA_PUBLIC_KEY_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal ECDSA_PUBLIC_KEY_NOTE_BYTES_LEN: Field = 5 * 32 + 64;\n\n// Stores an ECDSA public key composed of two 32-byte elements\n// TODO: Do we need to include a nonce, in case we want to read/nullify/recreate with the same pubkey value?\n#[aztec(note)]\nstruct EcdsaPublicKeyNote {\n    x: [u8; 32],\n    y: [u8; 32],\n    // We store the npk_m_hash only to get the secret key to compute the nullifier\n    npk_m_hash: Field,\n}\n\nimpl NoteInterface<ECDSA_PUBLIC_KEY_NOTE_LEN, ECDSA_PUBLIC_KEY_NOTE_BYTES_LEN> for EcdsaPublicKeyNote {\n    // Cannot use the automatic serialization since x and y don't fit. Serialize the note as 5 fields where:\n    // [0] = x[0..31] (upper bound excluded)\n    // [1] = x[31]\n    // [2] = y[0..31]\n    // [3] = y[31]\n    // [4] = npk_m_hash\n    fn serialize_content(self) -> [Field; ECDSA_PUBLIC_KEY_NOTE_LEN] {\n        let mut x: Field = 0;\n        let mut y: Field = 0;\n        let mut mul: Field = 1;\n\n        for i in 1..32 {\n          let byte_x: Field = self.x[31 - i] as Field;\n          x = x + (byte_x * mul);\n          let byte_y: Field = self.y[31 - i] as Field;\n          y = y + (byte_y * mul);\n          mul *= 256;\n        }\n\n        let last_x = self.x[31] as Field;\n        let last_y = self.y[31] as Field;\n\n        [x, last_x, y, last_y, self.npk_m_hash]\n    }\n\n    // Cannot use the automatic deserialization for the aforementioned reasons\n    fn deserialize_content(serialized_note: [Field; ECDSA_PUBLIC_KEY_NOTE_LEN]) -> EcdsaPublicKeyNote {\n        let mut x: [u8; 32] = [0; 32];\n        let mut y: [u8; 32] = [0; 32];\n\n        let part_x:[u8; 32] = serialized_note[0].to_be_bytes();\n        for i in 0..31 {\n            x[i] = part_x[i + 1];\n        }\n        x[31] = serialized_note[1].to_be_bytes::<32>()[31];\n\n        let part_y:[u8; 32] = serialized_note[2].to_be_bytes();\n        for i in 0..31 {\n            y[i] = part_y[i + 1];\n        }\n        y[31] = serialized_note[3].to_be_bytes::<32>()[31];\n\n        EcdsaPublicKeyNote { x, y, npk_m_hash: serialized_note[4], header: NoteHeader::empty() }\n    }\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator([\n            note_hash_for_nullify,\n            secret,\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl EcdsaPublicKeyNote {\n    pub fn new(x: [u8; 32], y: [u8; 32], npk_m_hash: Field) -> Self {\n        EcdsaPublicKeyNote { x, y, npk_m_hash, header: NoteHeader::empty() }\n    }\n}","path":"/Users/yashbharti/Desktop/Engineering/core_projects/alpha-build-1/aztecWallet/src/noir_contracts/ecdsa_public_key_note/src/main.nr"}}}